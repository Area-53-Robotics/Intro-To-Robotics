{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Robotics","text":"<p>First of all, welcome.</p> <p>Robotics is hard work. Reading these documents will give you a basis for understanding many of the things you will need to know. Like anything else, they are useless without application, and can only be refined with practice. With that said: nothing ever turns out how it is supposed to. This line carries so much weight the more you delve into robotics. I hope you\u2019ll never have to experience the full burden of that phrase. In fact, no one should. That\u2019s why you have a team.</p> <p>My first year in robotics, I was placed on a team with new and old friends. Our only downside was that we were new to everything. We had no seniors on our team, so we looked to seniors on other teams for guidance. Even though we learned much from them, we had to teach ourselves many of the things that would become beneficial to us. Our first year, we only went to 3 tournaments and our highest ranking was 22nd place. But, we considered this a success because we were able to build and program a working robot that completed the task at hand--albeit not very well. Our second year we won a tournament, qualifying for states and nationals. I write this now, looking into my third season and back at my first two, and realize that we became what freshman us needed to look up to and learn from. So, my friends and I have compiled our knowledge into these documents for you and any other newcomers who need this information.</p> <p>-- Julian Cooper Leader and Lead Builder of 53E, Class of 2022</p>"},{"location":"driving/","title":"Driving","text":""},{"location":"driving/#drive-team","title":"Drive Team","text":"<p>Contrary to popular belief, the drive team is not there just to watch. In fact, the drive team actually bears the most responsibility during a match. As a drive team member, your job is to keep track of everything. And by everything, I do mean everything. You should know what your teammate is doing, what your opponents are doing, who is winning, who is losing, how much time is left, where your driver should go next to score, who is in a vulnerable position that you can take advantage of, and more. Drive team members should not solely watch their own robot, but instead watch the entire match and take stock of the entire game situation.</p> <p>One drive team member should stay focused on the time while also talking to the alliance partner\u2019s drive team. Effective communication within an alliance is important to winning. The other drive team member should be focused monitoring the whole game and telling the driver where to go. These are only general roles, which may change slightly depending on the game. For example, in Tower Takeover, one drive team member\u2019s job was always to keep track of the number of cubes of each color each alliance had to determine which color cubes to place in the tower to benefit their own alliance.</p>"},{"location":"driving/#driver","title":"Driver","text":"<p>The driver\u2019s only job is to drive the robot. However, this does not mean they do not need to know the game and its rules extremely well. Although the drive team should do their best to tell the driver the best course of action at all times, it is inevitable that the driver will have to make a split second decision in order to win. In a pinch, the driver should be able to fulfill either or both of the drive team member\u2019s jobs, but this is not ideal as it gives the driver too many things to focus on.</p>"},{"location":"driving/#practice","title":"Practice","text":"<p>There is no real way to teach someone how to drive. In my experience, the only way to learn to drive is to practice. Depending on the state of completion of your robot, practice can involve many different things. If your robot is only a drivetrain at this point, you can set up obstacle courses to complete or practice driving from point A to point B or simply practice driving to a certain spot and turning your bot to face a certain direction. If you have a mostly or fully completed bot, you should try doing full skills runs to practice your driver skills or play in scrimmages against other teams to get experience in match-like conditions. And if you can\u2019t drive your bot, try watching match videos or come up with new strategies to try.</p>"},{"location":"driving/#driving-in-a-match","title":"Driving in a Match","text":"<p>There\u2019s nothing really to say here except to remain calm and be adaptable.</p>"},{"location":"leading/","title":"Leading","text":"<p>The leader of a team isn\u2019t just the leader. They\u2019re a builder, coder, or driver, and they don\u2019t even have to be the best. The leader\u2019s job has nothing to do with the robot, rather, it has everything to do with your teammates. I do want to say that all leaders are different, so there will be some practices that I implement that you don\u2019t agree with. The differences arise in how your team functions and each person\u2019s personality.</p>"},{"location":"leading/#meetings","title":"Meetings","text":"<p>As the leader, your job is to direct each meeting so that your teammates stay on track and current goals are completed. Your meetings will change as your season progresses because your goals change. For example in the beginning of the season, your goal is to get the robot built, while at the end of the season you may prioritize driving. Below is a generalized meeting:</p>"},{"location":"leading/#pre-meeting","title":"Pre-Meeting","text":"<p>Go into the meeting prepared with what you want to accomplish. Maybe today\u2019s the day you build the drivetrain, maybe you practice auton. Have your meeting thought out a day or two in advance. It doesn\u2019t have to be super thorough, although a checklist could help here. You may not finish all the tasks you want to during a meeting, this is normal, just make sure that you can finish all the tasks you want to before the time that they\u2019re relevant (e.g. a tournament).</p>"},{"location":"leading/#start-of-the-meeting","title":"Start of the Meeting","text":"<p>The most important part about the beginning is getting people organized. Many times people will be late for various reasons so make sure you can cover them or ensure that they\u2019re early. You should try and get your teammates working as soon as possible, this includes you. If you have a task you need to start, start it. If you need to get someone else\u2019s task started (pulling out the robot and relevant parts), do so as it will help get people moving as they come in. Once everyone is there, fill them in on the goals. It\u2019s always nice to have people stand around a table and have a concise plan laid out. This is also a good time to let your team be aware of any important news that comes up. This may also be the only time you can talk to your entire team at once with their attention, so if you need to say anything do it now.</p>"},{"location":"leading/#middle-of-the-meeting","title":"Middle of the Meeting","text":"<p>Your team should break to complete whatever goals you have laid out. For example, the lead builder will talk to the secondary builder(s) about what needs to be built and how they\u2019ll do it. Many times, especially later in the season, you will have goals that need to be completed after another goal. If you can, try to keep people active within your team. If you\u2019re practicing auton and your builders have nothing to do, have them reset the field. If you have no jobs for people, send them to help out another team. Everyone appreciates an extra set of hands. Remember, busywork is still a job, inactive people can at least do that. Also, try to be active in each activity. Check in on the robot\u2019s progress, check in on how the code\u2019s coming, check in on the last skills run, check in so you stay up to date with your team. This will also help you evaluate goals.</p>"},{"location":"leading/#end-of-the-meeting","title":"End of the Meeting","text":"<p>After you\u2019ve finished an amount of goals, you need to wrap up. This can be anywhere from 15 minutes from the end to an hour past. The worst part about the meeting is having to clean up. Have your entire team clean up so that your workspace will be nice for your next meeting. Organize your parts so that you and your sister teams can find them.</p>"},{"location":"leading/#post-meeting","title":"Post-Meeting","text":"<p>After each meeting, in the car ride home, reflect over what happened in the meeting. What was actually completed? What was partially completed? What wasn\u2019t completed? If something was completed, move on to the next objective. If something wasn\u2019t completed or completed fully, finish it, then move on. If something doesn\u2019t get completed, you can\u2019t blame anyone. Maybe a previous goal took longer than expected. Maybe you set too many goals. The only time you can blame someone is if they weren\u2019t doing anything and even then you shouldn\u2019t. Once you\u2019ve determined what happened at the meeting, go back to Pre-meeting. It never ends.</p>"},{"location":"leading/#season-timing","title":"Season Timing","text":"<p>As the leader, you\u2019re also responsible to lead your team through a season. Basically, you need to have a coded, driven, functioning robot before a tournament. How do you get there? Let\u2019s start with the beginning of the season, we\u2019ll cover a bit more of this in The Season.</p>"},{"location":"leading/#the-beginning","title":"The Beginning","text":"<p>You want to lead your team through learning the new game. The Season talks about the pre-reveal and the reveal. Lead your team through these so that you\u2019re all on the same page and everyone understands what needs to be understood. In the very beginning of the season, specific roles don\u2019t matter too much. Notebooking is very important, so ensure that your notebooker is doing their job. Once your team has a general idea of what you\u2019re going to do, you move into the middle season.</p>"},{"location":"leading/#the-middle","title":"The Middle","text":"<p>You are not the lead builder, lead coder, or lead driver (unless you are). You do not have domain over exactly how something should be built. That\u2019s the lead builder\u2019s job. Give your suggestions, they\u2019re important, but you can\u2019t use your leader position to control how other people work.</p> <p>Once you have a design decided on, tell your lead builder to talk people through how to build the robot. Ask them to give you relevant goals to accomplish in meetings. The same goes for your coders and drivers. You want to let your lead builder/coder/driver decide what direction to take the robot. You decide how to make sure your team follows their directions.</p> <p>But, you may also have to make executive decisions. Maybe people are having a disagreement, you might be the tiebreaker. Make sure to think through your decision. Maybe there\u2019s no code written for your robot 3 weeks before a tournament. Start coding. You can go to a tournament with an incomplete robot, you can\u2019t go without good code.</p> <p>What\u2019s a good timeline? Build a part. Code whatever part you can once it\u2019s built. Test it after it\u2019s coded. Keep doing that until you have a robot. You\u2019ll have to talk to your lead builder/coder/driver to get a feel for when something will be done. Building always initially take the longest, although tapers off at the end. Coding can initially be very short, although it will get more tedious later. Driving is usually tied to coding, that\u2019s still true here. Your first tournament won\u2019t be your best. Make sure you have a functioning robot going into it. It doesn\u2019t have to do everything, as long as it can drive you\u2019re good. Two weeks before your first tournament you want to have your robot coded and your driver driven it. One week before, you want to have a simple auton coded, this isn\u2019t necessary although it will help you a lot. You will also want more driving practice and building fixes. The meeting before the tournament should be minor tweaks, driving practice, and auton practice. Make sure your team is prepared for the tournament, don\u2019t set them up for failure. Keep goals on time and make calls if they aren\u2019t.</p>"},{"location":"leading/#in-between-tournaments","title":"In-Between Tournaments","text":"<p>I\u2019m going over tournaments in the next section. Depending on the time between tournaments, you can improve on a number of things. I recommend going over what went well and what didn\u2019t at your first meeting back or if you don\u2019t have time, talk to your teammates about it and make some decisions. Either way, decide what goals you need to accomplish before your next tournament. Knock them out. Before the next tournament, make sure your driver gets practice.</p> <p>End of the Season These are your last qualifying tournaments and any final tournaments. No major building changes. I can\u2019t tell you to follow that strictly, but try not to change your build. Your driver has had the entire season to learn the robot, they\u2019ll have a few weeks to learn a new one. What you do want to change is code, whether it\u2019s a better function or it\u2019s a better auton. You also want more driving practice, more skills practice, and more in-club scrimmages. You\u2019re late game now, it\u2019s not the time to recreate your robot, it\u2019s the time to take what you have and compete. Make sure your team follows your instructions on this explicitly.</p>"},{"location":"leading/#tournaments","title":"Tournaments","text":"<p>Similar to the rest of the time, your job as leader during a tournament is to pull your team through. Unlike the rest of the season, your word is final.</p>"},{"location":"leading/#pre-tournament-prep","title":"Pre-Tournament Prep","text":"<p>Make sure your driver has practiced, your code is finished, and your robot is good. Pack any parts you think you\u2019ll need and any parts you might not. Keep your team in good spirits and make sure everyone feels ready for the tournament (no one really feels ready, although you have to accept you\u2019ve done everything you can). You also have to ensure that everyone has rides to the tournament.</p>"},{"location":"leading/#pre-matches","title":"Pre-Matches","text":"<p>When you get to the tournament, get everyone ready and get your driver practicing or get your auton practiced. Have someone check-in and give the judges your notebook. When you have everyone together, excluding your driver, give them their assignments. You\u2019ll need at least one person scouting and watching all the matches, don\u2019t make this yourself because you need to be there for your team. You\u2019ll need up to 2 people to be the drive team, your driver will pick them. Any other people will need to standby for coding changes and building fixes. Your driver will be driving. They are the key to the tournament, it\u2019s your job to give them the best chance at winning. Get ready for your matches, make sure everyone has the schedule, don\u2019t break your robot.</p>"},{"location":"leading/#qualification-matches","title":"Qualification Matches","text":"<p>Get your team to each match on time. In-between matches, practice your auton, practice your driving, fix minor parts. But, don\u2019t overdo it, you want people to be fresh. This is everyone\u2019s time for a break, take it. During the match cheer or don\u2019t cheer, I\u2019m not sure what your driver likes. Again, cater to your driver. Sometime during the tournament, you will be judged. Make sure you are judged in-between matches, you want everyone there to talk. Judging will be covered more in The Tournament. Also during your time off you should complete skills. Only do this when your driver is ready. It is your job to get your team to skills. Know your schedule so you can find a good opening to do skills and judging.</p> <p>Most importantly, you will have to make decisions on everything in the tournament. Will you let your builder change this part? Do you want to go with code 1 or code 2? What partner will you choose? You should talk to the respective leads and your driver about what they want done. Once you make your decision based off of theirs, it\u2019s final. No one argues with it. Use a stern voice. Remember: you have to get your team through a tournament no matter how much somebody wants to do X, Y and Z.</p>"},{"location":"leading/#finals","title":"Finals","text":"<p>You\u2019ll have to pick partners. Use your scout\u2019s information and talk with your teammates. Ultimately it\u2019s your driver\u2019s decision. If they don\u2019t know, it\u2019s your\u2019s and your scout\u2019s. Get your team and your partner\u2019s to matches on time. Offer to help with anything they need. They are an extension of your team. You should know of and use a timeout. Each pair only gets 1 timeout in all of the finals matches. But, if you need to get that last auton made, it might be worth it. Each timeout is 3 minutes. Eventually, you\u2019ll get to your match and you want to support your team. Do whatever is best for your driver. This is when it matters.</p>"},{"location":"leading/#conclusion","title":"Conclusion","text":"<p>Your job is to get your team through the season. Whether it\u2019s a meeting or a tournament, your job is to advance your team. Listen to your teammates for information and make judgments. Sometimes you\u2019ll be right, sometimes you\u2019ll be wrong. A good leader will know how to correct the wrongs (listen to the leads). What is your short-term end goal? Build a drivetrain? Finish the code? Do driving practice? Get through the tournament? Make sure your team knows, and make sure you follow steps to accomplish the goal.</p>"},{"location":"notebooking/","title":"Notebooking","text":"<p>I can\u2019t notebook. I can barely read my own handwriting. I\u2019ll turn it over to our best notebookers: Terry from 53A and Chad from 53E. Terry\u2019s notebooks have won numerous awards, he\u2019s the real deal. What is notebooking and documentation? Quoted from Wikipedia (it's a good source despite what school tells you, trust me), documentation is \u201ccommunicable material that is used to describe, explain or instruct regarding some attributes of an object, system or procedure, such as its parts, assembly, installation, maintenance, and use.\u201d Simply put, you are showing the process taken to reach your final product, simple as that. It\u2019s hard at first, it\u2019s time-consuming, however as we shall explain later, it is very important and applicable not only to VEX, but also in your future careers.</p> <p>Notebooking in VEX is especially important since it is key to several important awards:</p> <ul> <li>The Design Award</li> <li>The Excellence Award</li> <li>To reach these, your notebook needs to:</li> <li>Highlight what your robot is</li> <li>Prove that you built it</li> <li>Dive into the details of how you built it.</li> <li>Detail how you improved over time</li> </ul> <p>Teresa has compiled a slideshow for use alongside this section.</p>"},{"location":"notebooking/#basic-rules","title":"Basic Rules","text":"<p>(Slides 2-5) You\u2019ll need to follow some basics.</p> <ul> <li>Must be written in blue or black ink</li> <li>No typing!</li> <li>If you have the time, as often as possible type an entry, edit it, and then transcribe it.</li> <li>No white-out</li> <li>Accept your mistakes, don\u2019t edit your entries to look better.</li> <li>If you write the wrong word, draw a single line through it and continue</li> <li>If it\u2019s more than 5 words, sign the error</li> <li>Plan out your sentences so this doesn\u2019t happen</li> <li>Plan out large titles on other papers</li> <li>Don\u2019t cover words with photos, you\u2019ll lose points</li> <li>Each page is signed and initialed by writer and a witness</li> <li>Notes are in chronological order and dated</li> <li>You can\u2019t glue/tape in entries</li> <li>You can glue/tape in photos or drawings</li> </ul> <p>You\u2019ll also need to spread the work around. Writing is a lot of work. Each person should be contributing to entries, whether it\u2019s through an online document, writing rough drafts, or coming up with ideas or topics to write about. Contributing to notes is also key here.</p> <p>Your best artists should also do drawings. Drawings are real eye-catchers so they should be good, we\u2019ll talk more in-depth about drawing later. Only 1 person should be writing in the notebook, but there should be a system of other people helping that person out with obtaining material to write about. Optimally, people write into an online document, it\u2019s edited, and then transcribed. But, if you have to go straight to transcribing (you\u2019ll want to do it fast so you don't forget the information).</p>"},{"location":"notebooking/#first-pages","title":"First Pages","text":"<p>(Slides 6-10) Before we talk about content, we should tell you how your notebook is organized. Depending on the notebook you have, your Table of Contents or Profile will be first. Next, you talk about this year\u2019s game. Lastly, you talk about meetings and tournaments, they\u2019ll be in the next sections. Your first pages give the judges their first impression about your notebook (besides the cover). Make sure these look the way you want them to and contain all the right information.</p>"},{"location":"notebooking/#profile","title":"Profile","text":"<p>Your profile is when you introduce your team. You can add pictures of your team members and provide a more detailed introduction on who they are (keep this simple, 1-2 sentences max). Remember, this part is all about your team, not about your robot. If you really want to stand out to judges, you should place a key in this area. There are 2 color-coded keys. One to denote team members, the other to denote notebook topics. The second is sticky note tabs. These help improve organization and make the layout seem standardized.</p>"},{"location":"notebooking/#table-of-contents","title":"Table of Contents","text":"<p>Your table of contents breaks down your notebook. It\u2019s used to make it easier to find information and can show a brief overview of what you\u2019ve done.</p>"},{"location":"notebooking/#pre-reveal-reflection","title":"Pre-Reveal Reflection","text":"<p>Your pre-reveal reflection talks about what went well and what didn\u2019t in your previous season. This is an important discussion to have as it will help you grow as a team.</p>"},{"location":"notebooking/#rubric-requirements","title":"Rubric Requirements","text":"<p>(Slides 11-19) This is what gives you points, make sure you have them. This section details an important process, known as the engineering design process (sometimes abbreviated EDP). In the slideshow, please use page 1 of the design award rubric so you know everything judges are looking for in a notebook.</p>"},{"location":"notebooking/#game-rules","title":"Game Rules","text":"<p>This will be a fairly long and colorful entry. Make sure to note all rules relevant to this game. Having drawings of the field and game elements can be handy as they\u2019re useful for reference.</p>"},{"location":"notebooking/#brainstorming","title":"Brainstorming","text":"<p>Any type of project needs to be brainstormed. Break down each main section of your robot and record pros and cons. Go in-depth into what each part does and how it affects the whole design. The more quality ideas you have here, the better. Use your previous knowledge, what you\u2019ve viewed when other people used the design, or even build the design, to know how a design works (any takeaways). Judges notice new and innovative ideas, so don't be afraid to put something in even if it seems outlandish or out of the box. It is usually these ideas that really improve the quality of your robot and make you stand out as a great team.</p>"},{"location":"notebooking/#design-selection","title":"Design Selection","text":"<p>You\u2019ll need to select your top 1 or 2 designs so that you have something to fall back on. There are multiple ways to decide.</p> <ul> <li>Democracy - Each person votes for the best design</li> <li>Rank the Designs - Each person ranks all the designs and assigns points to them. When totaled, whichever has the most is chosen</li> <li>Lead - Either the leader or lead builder chooses what they think is best</li> <li>Scoring - The entire team assigns a point value to each design, the highest is chosen</li> <li>Assigning points can be a great way to see the strengths and weaknesses of a design from several different viewpoints (Example: Mobility, Speed, Power, etc)</li> </ul>"},{"location":"notebooking/#building-and-coding","title":"Building and Coding","text":"<p>This will take a large portion of your season and your early meetings. Record this chronologically.</p>"},{"location":"notebooking/#building","title":"Building","text":"<p>Make sure to create a design plan, sketches, commentary on progress, pictures, and any other things that help document the entire process of how you got from start to finish. You\u2019ll want to note what went well, but also what didn\u2019t. How you fix these issues is important. Occasionally, you\u2019ll need to rebuild a subsystem or even the entire robot. You can redo your entire brainstorming session, or look at your previous results. Make sure to record your reasons for rebuilding, how you did it, and what the results were.</p>"},{"location":"notebooking/#coding","title":"Coding","text":"<p>Make sure to take screenshots of code, and especially unique code. By having a special program or coding section, this can really be a great way to stand out to judges who are looking for something different than the rest of the teams. For auton runs, record data and paths taken into the notebook. This will allow judges to see what you did and allow you to improve among these runs. Be sure to show drivetrain code and describe how your drivetrain works. Other subsystems should also be highlighted. You can even draw a controller to show what happens when you press this button. Sensors can improve your robot, and depending on how you write them up, can improve your notebook. Note how the coder coded the sensor, implemented it, and what the difference would be if you didn\u2019t have the sensor.</p>"},{"location":"notebooking/#driving","title":"Driving","text":"<p>There are many times where your driver will have to pick up the controller. They\u2019ll all fall under this category and your notebook should reference all of them.</p>"},{"location":"notebooking/#testing","title":"Testing","text":"<p>After fixing a part or changing the code, you\u2019ll want to see how the robot reacts. Note the change and then have your driver test it a few times. Note the results, quantitative or qualitative. You can also set hypotheses and goals to try and get to a certain point. Note these and any improvements.</p>"},{"location":"notebooking/#practice","title":"Practice","text":"<p>Sometimes your driver just needs seat-time. You can make a point of it to time them to score X amount of points or score an amount of points in X time. These are good quantitative results. You can also discuss different driving strategies. Maybe you\u2019ve noticed that you score your points very fast. This may lead you to play more defense if you know you can score points without much time. If you can\u2019t score fast, maybe you can\u2019t play defense. Maybe you\u2019ve noticed that when you do X your robot responds Y. Depending on what it is, you may have to build a strategy around it or correct it. These are important qualitative results. This will also help your driver know how to improve.</p>"},{"location":"notebooking/#skills","title":"Skills","text":"<p>1 minute, score as many points as you can. Do lots of tests, especially if you prioritize skills during tournaments. Record different tests, their scores, and recent modifications that happened. You might also need to record changes to driving strategies or the robot itself during skills. For example, my team removed a part of our robot for skills so we could complete different objectives. With practice, you\u2019ll find what\u2019s optimal.</p>"},{"location":"notebooking/#other-requirements","title":"Other Requirements","text":"<p>Make sure you repeat your building, coding, and driving/testing so that you can improve your robot. Besides being necessary for a good robot, you need to document these changes for a good notebook. You and other teams should also be able to repeat any changes that you made, even building an exact copy of the entire robot just by reading your notebook. Make it detailed and organized! Buy your notebook first, don\u2019t bind it. Be thorough with the projects you show. Make sure to write each of them out and include them in your table of contents.</p>"},{"location":"notebooking/#extra-entries","title":"Extra Entries","text":"<p>(Slides 20-35) There are some important entries you should make that aren\u2019t necessarily part of the rubric, although they\u2019re necessary to have to compete for awards (but they will greatly increase your chances to get one).</p>"},{"location":"notebooking/#tournaments","title":"Tournaments","text":"<p>Tournaments are what makes robotics. They can also make your notebook. Try to write these entries as soon as possible since you have the memory fresh in your mind.</p>"},{"location":"notebooking/#reflection","title":"Reflection","text":"<p>An overall breakdown of the day. Talk about the tournament and how you did. Anything that was outstanding, good or bad, should be said here.</p>"},{"location":"notebooking/#match-analysis","title":"Match Analysis","text":"<p>This is when you can compare how your robot did in practice vs in theory. Start off with any strategies that you planned. Then talk about the match itself. Make sure to say why you won or lost, whether it be driving skills, robot quality, autonomous, or even luck. Although don\u2019t rely on luck too much. Don't forget to include your scores.</p>"},{"location":"notebooking/#addressing-problems","title":"Addressing Problems","text":"<p>Have each person say what they thought went wrong. Many times, this will be connected to your match analysis. Sometimes you have to make a fix in-between matches, include that problem here and the solution in the next section. Here you may also want to mention subsystems that underperformed, or didn\u2019t perform how you thought they would.</p>"},{"location":"notebooking/#planning-changes","title":"Planning Changes","text":"<p>Suggest new solutions to the problems you\u2019ve mentioned. Make sure to think of short-term fixes if you don\u2019t have time. If you do have time, do the long-term fix. You may also want to include different things other teams did, if they outperformed your robot. Other teams\u2019 robots can always be starting points as a reference for improvement.</p>"},{"location":"notebooking/#long-term-plans","title":"Long Term Plans","text":"<p>Write about what you need to do and how many meetings it will take. You may not have enough meetings to do everything so you\u2019ll have to explain that you chose the most important. Talk about what you\u2019re going to fix, this could go in its own entry.</p>"},{"location":"notebooking/#drawing","title":"Drawing","text":"<p>Drawings are really important because they highlight your notebook. A good drawing can explain a system better than words can. Use a ruler for these as you\u2019ll want straight lines, it goes a long way in helping your drawings look professional. You may also want to use colored pencils or pens. Don\u2019t mess up your drawings, so you may want to practice it on a separate piece of paper first. When you do mess up, try to correct it as much as you can or distinguish the error. Don\u2019t cover up drawings, although if you need to break the rules, don\u2019t let it be found.</p>"},{"location":"notebooking/#photography","title":"Photography","text":"<p>Photos are your primary source for showing off your robot. Be sure to use them well. Take pictures as you build so that judges can see the chronological flow from how you started to the finished product. Also take multiple pictures so that you can choose the best one. You\u2019ll have to stage your photos a bit, so keep that in mind. Make sure to get sharp and clear photos that have good lighting. When printing them out, it is recommended to use the schools\u2019 printers since they can produce very vibrant pictures (seeing it firsthand, there is a noticeable difference)</p>"},{"location":"notebooking/#code-inclusion","title":"Code Inclusion","text":"<p>Code is really important to add since it shows that you\u2019re actually programming your robot. You\u2019ll want to add screenshots as soon as you have them. You may even want to add pseudocode before you start coding. Make sure you show any edits to your code and any unique parts that you have.</p>"},{"location":"notebooking/#digital-notebooking","title":"Digital Notebooking","text":""},{"location":"notebooking/#final-tips","title":"Final Tips","text":"<p>(Slides 36-37) Keep improving, good luck!</p>"},{"location":"the-season/","title":"The Season","text":"<p>Dun, dun, dun. Out of the two parts of robotics (meetings and tournaments), this is the second best! We\u2019re going to take all of what you learned previously and bundle it into an entire season. Use common sense and logic. I\u2019d say that there\u2019s as much thinking through problems as there is applying the previously taught material. This section is divided into 4 sections designed to mimic the natural progression of a season. If you learn this with a team, your senior members will do this out of habit, although there are some tricks that they might not know. If you don\u2019t learn this with a team, try to find people to bounce ideas off of since all activities work better with collaboration. If you\u2019re with a team but you don\u2019t have any seniors to help you, follow this guide to learn the ins and outs.</p>"},{"location":"the-season/#pre-reveal","title":"Pre-Reveal","text":"<p>This is a very boring but very important part of the brainstorming season. For new members this step is impossible to do, although it helps to listen to senior members. Get ready to start the season.</p>"},{"location":"the-season/#lessons-learned","title":"Lessons Learned","text":"<p>Last season we did this but didn\u2019t do that. We saw other teams do this when we did that. We did this and other teams did this too. The first thing you want to do when approaching a season is reflect on your past season. Here\u2019s a list of pros and cons of things you\u2019ll want to consider:</p> <ul> <li>Building</li> <li>Coding</li> <li>Driving</li> <li>Tournaments</li> </ul> <p>Make sure to think of good and bad things that happened regarding each of these and think of what you as a team can do to improve. Your leader should take your team through this exercise and ensure that your team is able to grow. Your notebooker should take notes on what you discussed, and then organize it into a write-up that shows progression. Everyone should talk about what they saw, even if they aren\u2019t the lead person of that role (i.e. a coder can talk about building, even if they aren\u2019t the lead builder). Lead persons should take special consideration into what they saw in how people worked together in the respective role and how they will lead their role better.</p> <p>In this section you may also want to consider non-robotics issues such as:</p> <ul> <li>Inter-team interactions</li> <li>Intra-team interactions</li> <li>Coach and parent interactions</li> </ul> <p>Also think about how you worked as a team. These things could be interesting to talk about if you want to tear each other's throats out. Think about things that you and others did well or didn\u2019t do well. This will either lead to a better team or different teammates, both are improvements. Anything that you think needs to be said should probably be said. This is the time to get everything off your chest.</p>"},{"location":"the-season/#meetings","title":"Meetings","text":"<p>Since this is the beginning of the season, it\u2019s also a good time to plan out meetings. See what day you all will be able to make a meeting. I like having 2 meetings a week although many times we can only get 1. At this time you should also plan your next few meetings which include:</p> <ul> <li>Watch parties for the reveal</li> <li>Reveal discussion</li> <li>Post-reveal discussion</li> </ul> <p>We\u2019ll go more in-depth later, but make sure to have meetings set up since these next few meetings determine a lot of what you do for the rest of the season.</p>"},{"location":"the-season/#reveal","title":"Reveal","text":"<p>The most fun part of your brainstorming season. Get a bunch of friends together, watch some live stream, yell at said live stream, cry that the game is so bad, then start designing the best robots this side of the Mississippi has ever seen while mumbling under your breath \u201cthis game sucks.\u201d Got a bit too realistic there.</p>"},{"location":"the-season/#watch-parties","title":"Watch Parties","text":"<p>Watch parties are lots of fun and really important. Work with other teams for this as more input is better. Many times, most of the club will get together and participate. Other times we send someone to spy on the state server to hear ideas. Some teams even stream their watch parties. I\u2019ll go through the steps of a watch party.</p>"},{"location":"the-season/#get-together","title":"Get Together","text":"<p>Have someone organize the watch party. VEX says when they will do the live stream of the new game, so planning around that is important. If you aren\u2019t able to make the specified time, you can still participate afterwards.</p>"},{"location":"the-season/#watch-it","title":"Watch It","text":"<p>Get together in person or on social media, and gather a bunch of materials (below). Watch the VEX live stream. Bring some snacks too, pretzels are always nice because there\u2019s no dust left on any papers you bring. Materials:</p> <ul> <li>Phone and laptop</li> <li>Printer and graph paper (about 5 of each per person)</li> </ul> <p>Your notebooker should also take notes about what happened during the watch party. If your team has taken notes about the game, they\u2019ll be grateful.</p>"},{"location":"the-season/#understand-the-game","title":"Understand the Game","text":"<p>After you watch the game, you\u2019ll want to dive right into designing your robot. But, it\u2019s important that everyone understands the game first. Things to do to understand the game:</p> <ul> <li>Watch the video multiple times<ul> <li>Think about the important parts, there\u2019s a lot of fluff in the videos</li> </ul> </li> <li>Read the game manual     -It\u2019ll be on the VEX website<ul> <li>It\u2019s a very long document, but you should learn the rules in it</li> </ul> </li> <li>Explain the game to others<ul> <li>Teaching others will help you understand the game better too</li> </ul> </li> </ul> <p>You should understand the game to see what your robot can and can\u2019t do. Your notebooker should also understand the game as writing up the game is an important part of the notebook.</p>"},{"location":"the-season/#post-reveal","title":"Post-Reveal","text":"<p>This is where robotics really starts. Your team should still be together, and this should occur right after you\u2019ve watched the reveal. Another suggestion is for each person to create their own ideas for each bolded section then come together and share. Put your bad ideas cap on because we want every single one of them. For legal reasons, that was a joke, please give good ideas.</p>"},{"location":"the-season/#identifying-objectives","title":"Identifying Objectives","text":"<p>You\u2019ve watched the reveal and you understand the game semi-perfectly. First you need to break the game down. Identify these or more:</p> <ul> <li>Offensive strategies</li> <li>Defensive strategies</li> <li>Scoring strategies</li> <li>Descoring strategies</li> </ul> <p>Make sure each person understands each strategy. Everyone should also be thinking about how these strategies play into building, coding, and driving the robot.</p>"},{"location":"the-season/#solving-objectives","title":"Solving Objectives","text":"<p>This is a very long section. This is your brainstorming section for notebookers. There are a lot of different categories to discuss and a lot of ideas in each one. For this section especially, have everyone go into separate rooms to create their ideas. Once everyone\u2019s done, come together and discuss.</p>"},{"location":"the-season/#categories","title":"Categories","text":"<p>You may want to add other categories depending on what the game calls for.</p> <ul> <li>Scoring mechanism</li> <li>Descoring mechanism</li> <li>Drivetrain type (H, X, U)</li> <li>Wheel types</li> </ul>"},{"location":"the-season/#ideas","title":"Ideas","text":"<p>I can\u2019t cover each idea in each category, since I don\u2019t know what game you\u2019ll use this for, but I can talk about the general way to formulate ideas. Make sure to draw and write out your examples.</p> <ol> <li>Think really hard about the category you\u2019re working on</li> <li>Think about what you did the previous year (if it applies)</li> <li>Do a small pro/con about it</li> <li>Repeat for designs that you\u2019ve seen other teams use</li> <li>Repeat for designs that you\u2019ve seen in previous games</li> <li>Repeat for designs you just made up</li> <li>Think about how each idea affects the current game</li> </ol> <p>I\u2019ll do one for drivetrains:</p> <ol> <li>We used an H-Drive last year</li> <li>Pro: really fast in a straight line, Con: didn\u2019t turn very well</li> <li>Other teams used X-Drives</li> <li>Pro: turned really well and was fast, Con: was easy to push</li> <li>Theoretical is the U-Drive (front-end H-Drive, back-end X-Drive)</li> <li>Pro: better turning, Con: different speed wheels may have a negative effect</li> <li>Maybe you think this game will be played without as much defense, so you can use an X-Drive since it\u2019s Con won\u2019t affect too much.</li> </ol> <p>Once your team has formulated all their ideas, regroup and share them. Talk about each pro and con and write them up into one sheet per idea.</p>"},{"location":"the-season/#scoring-solutions","title":"Scoring Solutions","text":"<p>Decide on one method to score solutions, some popular ones are below:</p> <ul> <li>Democracy - Each person votes for the best design</li> <li>Rank the Designs - Each person ranks all the designs and assigns points to them. When totaled, whichever has the most is chosen</li> <li>Lead - Either the leader or lead builder chooses what they think is best</li> <li>Scoring - The entire team assigns a point value to each design, the highest is chosen</li> </ul> <p>You\u2019ll want to decide on your top 1 or 2 ideas from each category. You may need to rebuild portions of your robot, so having a semi-developed idea to fall back on is useful. Remember to think about how each design influences the game. Use your pros/cons to guide you. Some designs may affect designs in a different category, so you\u2019ll want to think about that. Once you\u2019ve narrowed your selection, choose the ones you\u2019ll start building with. You may want to look to the lead builder for this. If you think the chosen design is a mistake, talk it out a bit more. You\u2019re early enough in the season that you can flesh out plans and not have it hurt.</p>"},{"location":"the-season/#meetings_1","title":"Meetings","text":"<p>Once you\u2019ve decided on your top design for each category, your next move is to start building, coding, and driving. Even though each section has its own specialties that will be broken down below, the following is true for all of them. You need to repeat the engineering design process (EDP). If you aren\u2019t familiar with the EDP, it says that you create something, test it, analyze the results, and improve it. So if you build a drivetrain using chain, you then code it, then drive it. Let\u2019s say that your sprockets are slipping, you deduce that the problem is your chain is too loose. You improve it by removing links. Since nothing can be perfect, at the end of a cycle, you will have to move on to another piece of your robot. It\u2019s as important to see everything as a whole as it is to see it separately.</p>"},{"location":"the-season/#start-of-the-meeting","title":"Start of the Meeting","text":"<p>The leader should have a plan for what they want completed during each meeting. Try not to be late, so you don\u2019t miss the plan. If you\u2019re the lead builder, coder, or driver you may also have specific plans of what you want to do. Once everyone understands what needs to be done, the respective people start on their tasks.</p>"},{"location":"the-season/#middle-of-the-meeting","title":"Middle of the Meeting","text":"<p>This is when you get to work on building, coding, and driving. At the beginning of the season, your meetings will most be building. The middle will be coding. The end will be driving. Obviously there will need to be small build or code fixes along the way, and the driver will need to test some mechanisms out, but that is the general flow.</p>"},{"location":"the-season/#building","title":"Building","text":"<p>With your designs decided on, you\u2019ll need to start somewhere. I recommend starting with CAD. You can CAD out specific subsystems and then build them up to create your entire robot. CAD is very nice since they act as exact blueprints. The lead builder would most likely do the CAD with other builders helping. You can also start with graph paper and drawing out 2D designs. Even though it isn\u2019t ideal, you can draw out drivetrains and other simple mechanisms. Build the drivetrain first and then build the rest of your robot piece-by-piece. After each part is built, get it coded and tested and then improve it. Large-scale rebuilds are another important part of building. You may see that you need to rebuild after going to a tournament and realizing that your robot doesn\u2019t hold up. Or you may realize that a design doesn\u2019t work for reason X while designing it. Don\u2019t be afraid to rebuild large parts of your robot, just make sure you have enough time to. You may have to start at square 1, but having a solid starting point is key.</p>"},{"location":"the-season/#coding","title":"Coding:","text":"<p>After a part is built by the build team, you want to code the controls immediately. Coding for driver control does not take very much time and can be done even if the rest of the robot has not yet been built. You should always try to code basic controls while the rest of the robot is being worked on by the build team. After you have coded your drive controls, you\u2019ll want to begin working on autonomous programs immediately. The process is simple: write out your functions, then run the autonomous functions, and make small changes until the autonomous function works consistently. Finally, once you are done with your autonomous, or have made significant progress, let the driver test the controls and practice. While testing your driver may come up with suggestions for better controls or ways to automate something. Your job will be to make that happen as quickly as possible to make the driver\u2019s job as simple as possible.</p>"},{"location":"the-season/#driving","title":"Driving:","text":"<p>Once the part is built and coded, it needs to be tested. (Jan: write something that talks about EDP in driving, end it with sending it to the builder to fix)</p>"},{"location":"the-season/#end-of-the-meeting","title":"End of the Meeting:","text":"<p>Find a good spot to stop working and then pack up. Make sure your workspace is clean since other people may have to use it. If this is the last meeting before a tournament, you will pack up differently. That\u2019ll be discussed in The Tournament. When you leave, you\u2019ll need to have a small reflection and plan for the next meeting. Think about what goals you completed and what goals you didn\u2019t. You might realize that something didn\u2019t work, so you\u2019ll need to create something else. The leader will dictate what needs to be done, but you have power over how it gets done.</p>"},{"location":"the-season/#conclusion-of-the-season","title":"Conclusion of The Season","text":"<p>Oddly enough, the season never really ends. But for all intensive purposes, the season takes a break when you go to tournaments. You want to remember that you\u2019re making a robot to compete. You need to be able to make deadlines that put your work on the spot. Many times you will not complete all your goals before the deadline. You only need to complete as many as it takes to get your robot working.</p>"},{"location":"the-tournament/","title":"The Tournament","text":"<p>So even though tournaments are the best part of robotics, they can be very stressful. First, let me reiterate why you are building and coding your robot: to go to the tournaments. While the builders and coders work for most of the regular season, the driver works the most during the tournament. Now hopefully, you have a robot that does what you want it to do. But many times, especially early on, things break and don\u2019t work. Oddly enough, things break more often later on because they\u2019ve seen more action. You\u2019ll always need to fix your robot at competitions.</p>"},{"location":"the-tournament/#pre-tournament","title":"Pre-Tournament","text":"<p>This will be an entire meeting in itself. It should be a driving-centered meeting, but depending on the state of your robot, other things may be more important than the ones listed below. Don\u2019t break your robot, or drastically change it.</p>"},{"location":"the-tournament/#driving-practice","title":"Driving Practice","text":"<p>Set the field up, or don\u2019t, put a new battery in, and drive. For this, your driver should get ample time to get a feel for the robot. I recommend starting the practice how you would start a match after auton or how you would if your auton fails. Also get ready to fix any minor bugs in the robot or in the code. Don\u2019t let your motors overheat as you\u2019ll ruin your robot.</p>"},{"location":"the-tournament/#scrimmages","title":"Scrimmages","text":"<p>You can also do driving practice against sister teams to give practice a more realistic sense. 1v1 or 2v2 work here, depending on how many teams are actually available. See if there are things your driver can improve on or if there are minor fixes to your robot. Suggest them after the match.</p>"},{"location":"the-tournament/#skills-practice","title":"Skills Practice","text":"<p>1 minute on the clock, set up the entire field, and prepare your robot. Skills runs are harder to do at meetings since other teams likely need to use the field at the exact moment you do. I recommend having multiple paths planned out, so that your driver can test out different paths and score higher.</p>"},{"location":"the-tournament/#auton-practice","title":"Auton Practice","text":"<p>When your driver needs a break, run the auton. You can do this before the driving practice so that the robot is already set up. Have one person reset the field, one person reset the robot and one person change the code. Do a few tests each time you change the code, to see if your robot is consistent.</p>"},{"location":"the-tournament/#ending-the-meeting","title":"Ending the Meeting","text":"<p>Once your robot is finished, your code is debugged, and your driver has enough practice, pack up your robot. Also pack up spare parts that you\u2019ll need and some that you won\u2019t. Don\u2019t forget tools like dremels or metal cutters. Extra batteries and maybe an extra cable are useful. Bring rubber bands and zipties too. Try to get a good sleep or follow the tradition of all-nighters. Make sure you and everyone else has a ride to the tournament.</p>"},{"location":"the-tournament/#pre-matches","title":"Pre-Matches","text":"<p>Once you arrive at the tournament, you\u2019ll need to prepare your robot, do some testing, and mentally prepare yourself. First of all, make sure your robot and team (especially your driver) is there. People may come in late, so be prepared to work with less teammates or to be thrown into the mix if you\u2019re late.</p>"},{"location":"the-tournament/#inspection-and-check-in","title":"Inspection and Check-In","text":"<p>Once your robot is there, bring it to the inspection table. Finish up your notebook and bring it to the check-in table, the judges will take it and return it at the end of the tournament.</p>"},{"location":"the-tournament/#practice","title":"Practice","text":"<p>Next, you\u2019ll need to warm your driver up. Practice your auton, practice general driving. Whatever you practice, you\u2019ll never have enough space on the practice field. Make sure to run your auton a few times so that you know it works. Here is also where you should make minor changes to your robot. The most important thing is that you don\u2019t break your robot during practice.</p>"},{"location":"the-tournament/#scheduling","title":"Scheduling","text":"<p>Once the schedule is released, you\u2019ll know when your matches are and who they\u2019re against. From this you can deduce such things as: probability of winning, when you should do skills, and when you should try to get judged. Knowing how good your team is and how good other teams are will let you know if you have an easy schedule or a hard one. You should also plan when you can do skills, a large stretch between matches is ideal. VEX also offers two apps: VEX via and VRC Hub.</p>"},{"location":"the-tournament/#other-tips","title":"Other Tips","text":"<p>You\u2019ve practiced and you know your schedule, what\u2019s next? Keep your pockets full: Keep screws, nuts, a screwdriver and a wrench, and small pieces of metal in your pockets. Don\u2019t forget rubber bands (I keep a bag on my belt), zip ties (in the bag), and a spare battery (back pocket). I would also suggest goggles for the drive team. Eat: Make sure you eat something every once in a while and drink some water.</p>"},{"location":"the-tournament/#qualification-matches","title":"Qualification Matches","text":"<p>Please take everything said as guidelines, and that you should cater to your driver.</p>"},{"location":"the-tournament/#drive-team","title":"Drive Team","text":"<p>Your driver will select up to 2 other members to be the drive team. Their job is to give useful information to the driver such as time remaining, where game objects are, and strategies. Depending on what your driver wants to hear some people may be better drive team members than others. Wear your goggles!</p>"},{"location":"the-tournament/#preparing-the-robot","title":"Preparing the Robot","text":"<p>Get to the prep table 1-2 matches before your own. Talk to your teammate about auton and which one to use. You may also want to talk about strategies. Make sure that your robot is actually ready. Replace old rubber bands, swap for fresh batteries, anything that can tire will need to be replaced at some point. When you get on the field, set up your robot and ensure that the field is set up correctly. The drive team should be with the driver, and everyone else should be in the stands. The match will start, 2 minutes will pass, and it\u2019ll be done.</p>"},{"location":"the-tournament/#mid-matches","title":"Mid-Matches","text":"<p>You should welcome match breaks as your only downtime during the stressful day. But, this is not the case as most times you will have to do robotics related work. Your breaks will range from 5 minutes to 30. On every break you\u2019ll need to fix minor changes on your robot or in the code and on every long break you should try to do judging or skills.</p>"},{"location":"the-tournament/#scouting","title":"Scouting","text":"<p>Scouting occurs throughout the entire tournament. Even at the beginning of the tournament, someone should be scouting. Many times sister teams compile 2-3 people to scout together. They should switch with others as scouting can become tiresome, especially since there can be many qualification matches. Scouts watch as many matches as they can to see which robots are good and which aren\u2019t. You will need the information your scouts found during the elimination matches. Scouts should look for auton accuracy, offense, defense, and general driving. Since each game is different, you may want to add different categories in your notes.</p>"},{"location":"the-tournament/#skills","title":"Skills","text":"<p>Keep an eye on the skills line as it can build up very quickly in large tournaments. When you have a large break between matches, about 10 minutes if the line is short 20 minutes if it isn\u2019t, you should do skills. Your driver will have 1 minute to score as many points as they can.</p>"},{"location":"the-tournament/#judging","title":"Judging","text":"<p>When the judges come to your table, you should try to have your interview unless you have a match immediately. If you have to delay it, try to give them a time when they can return. Make sure everyone is there, introduce yourselves and mention if people didn\u2019t make the tournament. Use this accompanying slideshow: Teresa\u2019s Judging Guide</p>"},{"location":"the-tournament/#about-the-robot-slides-3-5","title":"About the Robot (Slides 3-5)","text":"<p>First talk about your current design. We have the lead builder mostly talk about it, with people chiming in when necessary. Make sure to discuss defining parts of your robot and how those parts help you play the game. You may want to include relevant game stats that you can complete during a match. Also describe how your robot is different from other robots to give the judges\u2019 a perspective. You\u2019ll also want to talk about pros and cons of your robot. Mention as much as you need to but don\u2019t put your robot down too much. Have a secondary builder talk about your previous designs, mentioning the previously said things.</p>"},{"location":"the-tournament/#more-on-the-design-slides-6-9","title":"More on the Design (Slides 6-9)","text":"<p>If things haven\u2019t been mentioned about the build, mention them here. If people haven\u2019t talked a lot, let them talk. If the entire team understands the design, the judges will notice. Talk about general things like why the design is effective, what it lets you do, why it isn\u2019t the best, and any trade-offs you made. Try to wrap up what you have to say about the robot now, as you don\u2019t want to sidetrack when you\u2019re talking about coding.</p>"},{"location":"the-tournament/#about-the-code-slides-11-13","title":"About the Code (Slides 11-13)","text":"<p>Have the coder talk through this section, but have the driver on standby incase code needs to be demonstrated. Start with explaining auton and all the situations of each. It may be a good idea to mention future auton ideas to show that you\u2019re thinking ahead. Next talk about the controller functions with the driver adding notes. You can do some actual examples here to help explain. Make sure to talk about macros and unique code and how they help the driver. The largest part to mention for all of this is advantages and disadvantages with the code and the drive. You can spend as much time talking about code as you do talking about the design.</p>"},{"location":"the-tournament/#other-pointers-slides-14-19","title":"Other Pointers (Slides 14-19)","text":"<p>Mention driving strategies as a lot of people don\u2019t. Mention any small things about the robot, the code, the drive, or any behind-the-scenes strategies. Once you learn physics, you can talk about basic relations or even use actual measurements. Anything Teresa has mentioned that was the reason she won, you should include. Judges look for very specific things and those comments are coming directly from judges. This is the guide that judges use: Judge Guide This is rubric for the interviews: Interview Rubric This is rubric for the design award, which is based on your judging and notebook: Design Rubric Other Things To Do Sometimes you just need to take a break between matches. Other times you need to rebuild half your robot. First, make sure you eat and drink some water. Staying somewhat healthy is necessary. Next, refrain from too much practice as you don\u2019t want to wear out your driver or your robot. But if something needs to be tested or a bug needs to be fixed, test it. Third, you\u2019ll want to do some auton practicing and correction. If you think you\u2019re alright, take a break.</p>"},{"location":"the-tournament/#elimination-matches","title":"Elimination Matches","text":"<p>After your qualification matches, each team will be ranked by win points. Assuming you\u2019ve done well enough in the tournament you\u2019ll get to pick your partner. If you haven\u2019t, hope to get picked.</p>"},{"location":"the-tournament/#alliance-selection","title":"Alliance Selection","text":"<p>Once each team is ranked, they\u2019ll repeat this process for determining the alliances: The highest ranking team announces their partner team The team can either accept or decline If they accept, the 2 teams become an alliance and it repeats for the next team If they decline, the selected team can\u2019t be selected by anyone else, but can still choose a partner if they have the chance. The first team returns to step 1.</p> <p>Before alliance selection, you and your team should sit down and come up with a list of the teams that you want to pick and what happens if someone picks you. Trying to figure everything out can be hard, but if you think through methodically, you\u2019ll do fine.</p> <p>So, the highest teams basically get any team they choose and lower teams have to go with whoever picks them. If you are a lower team and get picked, you say yes. Higher teams have more strategy. You\u2019ll want to consider the following: Scouting notes - you didn\u2019t take these for nothing, good notes will result in good picks Auton scoring - the more consistent auton is always a good indicator of a good team Previous partners - playing with someone previously can determine if they\u2019re good or not If worse comes to worst, either pick the highest ranking team you can (they\u2019re there for a reason) or pick a sister team (you can at least have fun with friends).</p> <p>What happens if you\u2019re highly ranked and get picked? Again, you\u2019ll want to have decided beforehand whether to accept or decline. Consider: If you decline, will they take your pick? Can you still do well without that pick? If you accept, are they the best match for you? This is a hard situation to be in and discussing it with your team is the only correct answer.</p> <p>You should also talk to other teams about alliancing or not alliancing. Remember, if a team you don\u2019t want to partner with picks you, you can\u2019t get picked again. So, you can either risk it, or ask them not to pick you. Both are entirely fine. If you want to pick a team, you should approach them and ask them if they want to alliance. If they say no, you should respect that. If they say yes, you should try to pick them. When talking to another high ranking team, you\u2019ll want to talk through the possibility that either of you can get picked by another high-ranking team. Since each team has their own right at the win, each team has to respect another\u2019s right. This comes up when each team wants to get picked by the highest team, but can\u2019t and therefore has to create contingency plans that benefit themselves the most.</p> <p>As a wrap-up, because alliance selection is confusion:</p> <ul> <li>If you\u2019re high on the scoreboard:<ul> <li>Pick a team who is good and wants to be picked by you</li> <li>If you\u2019re picked, ask yourself if you want to play with that team or take a chance on another</li> </ul> </li> <li>If you\u2019re middle on the scoreboard:<ul> <li>Pick a team you can have fun with</li> <li>If you\u2019re picked, make sure it\u2019s a team you have a decent chance with</li> </ul> </li> <li>If you\u2019re low on the scoreboard:<ul> <li>If you\u2019re picked, say yes because you might not be able to pick</li> </ul> </li> </ul>"},{"location":"the-tournament/#elimination-matches-elims","title":"Elimination Matches (Elims)","text":"<p>Your matches here will be just like your qualification matches, except now you have a set partner. Just make sure that you get to your match on time and do your best.</p>"},{"location":"the-tournament/#time-out","title":"Time-Out","text":"<p>For all of the Elims, your alliance gets 1 time-out. Generally you save your time out to finish a repair or an auton before the semi-finals or finals. Each time-out is 3 minutes long. Use it properly.</p>"},{"location":"theory/","title":"Theory","text":"<p>I started this book, like I said previously, to give freshmen the resources to learn and for senior members to teach. But this book was also meant to compile the knowledge that we had and the ideas that we formed. One of the most prominent ideas that we formed was drawn from the fact that our club was at a low point. So, we developed a solution, not robotics driven as you\u2019ve seen previously, but driven solely off of our experiences and common sense. This is theory; the idea that you can solve a problem in the club by changing the club.</p> <p>The Area 53 Team Division Manifesto</p>"},{"location":"theory/#teams","title":"Teams","text":"<p>In the manifesto, we first define a good team. It\u2019s basically a group of friends that work well together and fit each position on a team well. They don\u2019t have to win, but they are the best team because they can enjoy their friendship when robotics sucks and enjoy both when it\u2019s great.</p> <p>We next define different types of teams. An optimal team is well rounded, contains skilled members, and should be able to compete highly. It is commonly an exceptional tiered, concentrated, or team of X team. A tiered team is a team that cycles through members consistently. They have consistent strength and are normally mid-tier because of this. A concentrated team is a team that is made up of one grade level. They are weak early on, but are very strong later. A team of X is a planned team with few members. The members are usually grouped to win. A team of X by force is when there are many members on a team, but only X of them do work. These are the worst teams as the non-working members drag down the team. We also define competitiveness here. You know a competitive member by how they carry themselves in practice and in competitions. Competitiveness plays a large part in what types of teams are formed.</p> <p>Once we defined everything, we proposed how many teams of each type Roosevelt should have. This is bound to change, but gives a good sense of a healthy club.</p>"},{"location":"theory/#new-members","title":"New Members","text":"<p>We start by defining types of people. You can\u2019t tell what types of people incoming members are, but when you do grouping them accordingly is a necessity. According to the previous section, competitive, mid-competitive, and non-competitive teams tank similarly to this ranking. Avoid having the last 2 groups of people in the club as much as possible as they can waste spots.</p> <p>When admitting new members onto teams the current way is random distribution. This allows new members to learn immediately and develop. This method has worked previously and will likely be used again unless specific teams need to be made. But, there are some other untested ways that can yield different results. Tryouts is a very simple task to do a quick check to judge their attitude. It is the most basic method and the most inconclusive. If you have some knowledge about them, teams can draft the new members. This is a more complex task, but can yield great results especially for tiered teams. Team mentors lets existing teams create new teams out of new members no matter the experience. This is a very complex task, but can yield very powerful concentrated teams.</p> <p>You\u2019ve probably noticed that the Team Division Manifesto didn\u2019t include how to recruit people. We\u2019ve noticed 3 different ways with 3 different outcomes. The first is word of mouth, which yielded few but dedicated members. This method will probably never be used primarily again. The second is morning announcements, which worked the best. We got a large crowd initially, but it then reduced to a group of dedicated members. Notably, parents were never involved if the person didn\u2019t join the club. The third is the open house, which worked horribly. We got too large of a crowd and catered to parents instead of kids. We were left with members that were here because of their parents.</p>"},{"location":"theory/#how-to-change-the-club","title":"How to Change the Club","text":"<p>I\u2019ve told you our thoughts on team distribution and freshman integration. But there are a lot of problems that we haven\u2019t faced that you might and if we\u2019ve faced the same problem, it\u2019ll probably be in different circumstances. This section was meant to give you a jumping off point so you can start changing the club in different ways. Sadly enough, it\u2019s hard to change the structure of the club once you\u2019re already nose-deep, but there are cases when you have to do something. Sit down with dedicated members and talk through it. We started this book and it\u2019s documents for you, you\u2019ll need to update it for the next freshmen.</p>"},{"location":"appendix/about-the-authors/","title":"About the Authors","text":""},{"location":"appendix/about-the-authors/#2020-graduates","title":"2020 Graduates","text":"<p>Teresa Thoundayil - ERHS 2020 graduate and Georgia Tech 2024 graduate. She was 53A\u2019s lead, builder, notebooker, and driver.</p>"},{"location":"appendix/about-the-authors/#2022-graduates","title":"2022 Graduates","text":"<p>Chad Bo - 53E\u2019s co-lead, notebooker and builder.</p> <p>Gavin Crisologo - 53C\u2019s co-lead and coder.</p> <p>Julian Cooper - 53E\u2019s lead and builder.</p> <p>Jan Lapira - 53E\u2019s driver.</p> <p>Austin Luu - 53C\u2019s lead and builder.</p> <p>Ben Schultz - 53B\u2019s lead and builder.</p> <p>Kevin Yen - 53A\u2019s lead, builder, and coder.</p>"},{"location":"appendix/about-the-authors/#2024-graduates","title":"2024 Graduates","text":"<p>Felix Hass - 53E's lead and coder.</p>"},{"location":"appendix/about-the-authors/#2025-graduates","title":"2025 Graduates","text":"<p>Alan Morales - 53E</p> <p>Veena Raj - 53A</p>"},{"location":"appendix/about-the-authors/#2026-graduates","title":"2026 Graduates","text":"<p>Isaiah Blanc - 53C</p>"},{"location":"appendix/resources/","title":"Resources","text":""},{"location":"appendix/resources/#hardware","title":"Hardware","text":"<ul> <li>AURA - X-Drive Explanation</li> </ul>"},{"location":"appendix/resources/#cad","title":"CAD","text":"<ul> <li>Fusion 360 Add-In</li> <li>Vex CAD Discord</li> <li>why tinkercad is a bad cad software</li> </ul>"},{"location":"appendix/resources/#high-quality-robots","title":"High Quality Robots","text":"<ul> <li>Remembering the Best</li> </ul>"},{"location":"appendix/resources/#software","title":"Software","text":"<ul> <li>Learn C++</li> <li>Pros Documentation</li> <li>Git Documentation</li> </ul>"},{"location":"appendix/resources/#code-quality","title":"Code Quality","text":"<ul> <li>Core C++ Naming Conventions</li> <li>Google naming conventions</li> <li>Commenting Guide</li> </ul>"},{"location":"appendix/resources/#libraries-for-pros","title":"Libraries for PROS","text":"<ul> <li>Okapilib</li> <li>ARMS</li> <li>Lib4253</li> <li>Sylib</li> <li>EZ Template</li> <li>LemLib</li> </ul>"},{"location":"appendix/resources/#high-quality-robot-code","title":"High Quality Robot Code","text":"<ul> <li>lib7842</li> <li>4253B-Tipping-Point-Worlds</li> <li>nickmertin/5225A-2017-2018</li> <li>Team_7K_robotics</li> </ul>"},{"location":"appendix/resources/#notebooking","title":"Notebooking","text":"<ul> <li>Teresa\u2019s Notebook Guide</li> </ul>"},{"location":"appendix/resources/#the-game","title":"The Game","text":"<ul> <li>VRC Hub</li> <li>VEX Via</li> <li>Teresa\u2019s Judging Guide</li> <li>Judge Guide</li> <li>Design Rubric</li> <li>Interview Rubric</li> <li>Team Standings</li> </ul>"},{"location":"appendix/resources/#theory","title":"Theory","text":"<ul> <li>The Area 53 Team Division Manifesto</li> </ul>"},{"location":"appendix/resources/#misc","title":"Misc","text":"<ul> <li>Sigbots Wiki</li> </ul>"},{"location":"hardware/introduction/","title":"Hardware","text":"<p>Building might be one of the hardest techniques because there\u2019s always something new. When your robot breaks, it\u2019s because of the building. Your coder\u2019s limit, it\u2019s defined by the building. Your driver\u2019s capabilities, it\u2019s defined by the building. Your little sibling breaks your robot, you should\u2019ve built it better. This section is going to be broken down into 3 subsections each with their own topics. These topics may be new, they may have been repeated a thousand times (they should probably be repeated again). Either way, these topics should help you improve your robot. But implementing them is not enough. A good builder needs to know how to build well and take into account their coder\u2019s and driver\u2019s needs. I can\u2019t discuss that, but when you can take your coder\u2019s or your driver\u2019s idea and implement it semi-perfectly, you\u2019ve made it.</p>"},{"location":"hardware/parts/","title":"Parts","text":"<p>There are many different types of parts that can be used in vex robotics.</p>"},{"location":"hardware/parts/#structure","title":"Structure","text":"<p>This category includes the parts that make up the body of your robot.</p> <p>You can learn more about the structural components here.</p>"},{"location":"hardware/parts/#motion","title":"Motion","text":"<p>This category has everything that is designed to help with making things move on the robot. This includes things like wheels, axles, gears, and chain. However, it does not include actuators like motors and pneumatic pistons, which are in the electronics and pneumatics categories respectively.</p> <p>You can learn more about the motion components here.</p>"},{"location":"hardware/parts/#electronics","title":"Electronics","text":"<p>This category of parts includes things like batteries, the robot's brain, and motors.</p> <p>You can learn more about the electronic components here.</p> <p>There are also several types of sensors that can be used, which you can learn about here.</p>"},{"location":"hardware/parts/#pneumatics","title":"Pneumatics","text":"<p>This category of parts includes things components that use air to create motion.</p> <p>You can find more about pneumatic components here.</p>"},{"location":"hardware/subsystems/","title":"Subsystems","text":"<p>Subsystems are the smaller individual systems on your robot. There are many different types of subsystems, and they all have their own variations.</p> <ul> <li>Drivetrains</li> <li>Intakes</li> <li>Lifts</li> <li>Shooting Mechanisms</li> </ul>"},{"location":"hardware/techniques/","title":"Techniques","text":"<ul> <li>Joints</li> <li>Misc building techniques</li> </ul>"},{"location":"hardware/theory/","title":"Theory","text":"<p>Theory consists of the general mechanical knowledge and physics required to build robots. All of these concepts can be applied outside of VEX robotics.</p> <p>We recommend that you read the following sections of the BLRS wiki:</p> <ul> <li>Gear Ratios</li> <li>Internal Forces (Stress)</li> <li>Torque</li> <li>RPM</li> </ul>"},{"location":"hardware/tools/","title":"Tools","text":"<p>Here is a list of all the tools we have in robotics. They will be a picture, common names, and uses.</p>"},{"location":"hardware/tools/#screwdrivers-and-wrenches","title":"Screwdrivers and wrenches","text":""},{"location":"hardware/tools/#allen-wrench","title":"Allen Wrench","text":"<ul> <li>Also called an \u201cL\u201d or \u201cL wrench\u201d.</li> <li>Fits 8-32 hex screws, the common screw we use.</li> <li>This is the hardest hex driver to use, although it works best in small places and when supplies are short.</li> </ul>"},{"location":"hardware/tools/#motor-allen","title":"Motor Allen","text":"<p>Same as the allen wrench, but fits 6-32 hex screws.</p> <p>6-32 hex screws are mainly used in collars.</p>"},{"location":"hardware/tools/#t-hex-driver","title":"T Hex Driver","text":"<p>Also called a \u201cT\u201d or \u201cT wrench\u201d.</p> <p>Fits 8-32 hex screws, the common screw we use.</p> <p>This is another hard hex driver to use because of the long length of the driver as it can twist. But, works well for additional reach or torque.</p>"},{"location":"hardware/tools/#german","title":"German","text":"<p>Fits 8-32 hex screws, the common screw we use. This is the best hex driver to use if you have it. It\u2019s very strong and it\u2019s amazing for anything in general.</p>"},{"location":"hardware/tools/#wrench","title":"Wrench","text":"<p>The large head is used to hold nuts to tighten screws, the small head is used to tighten standoffs.</p> <p>Used with any hex driver or another wrench.</p>"},{"location":"hardware/tools/#ratchet","title":"Ratchet","text":"<p>Used to tighten screws, but can only turn one direction.</p> <p>Useful in tight spaces where you can\u2019t turn 360 degrees.</p>"},{"location":"hardware/tools/#saws-and-files","title":"Saws and Files","text":"<p>Wear eye protection when using any type of saw, especially a fast moving saw. Also please learn to use these from someone with experience before trying. I won\u2019t give any warnings here, so follow your instructor\u2019s instructions or the product\u2019s warnings.</p>"},{"location":"hardware/tools/#dremel","title":"Dremel","text":"<p>Used to cut metal and various plastic parts.</p> <p>It\u2019s better to use a dremel to cut through steel and a hacksaw to cut through aluminum.</p>"},{"location":"hardware/tools/#hacksaw","title":"Hacksaw","text":"<p>Used to cut metal and various plastic parts.</p> <p>It\u2019s better to use a hacksaw to cut through aluminum and a dremel to cut through steel.</p>"},{"location":"hardware/tools/#snips","title":"Snips","text":"<p>Large scissors used to cut aluminum quickly.</p> <p>Often leaves the surface with rough edges.</p>"},{"location":"hardware/tools/#file","title":"File","text":"<p>Used to remove sharp edges from metal.</p> <p>You can also use files to strip teeth off of a gear, although I would not recommend it (I\u2019ve done it before).</p>"},{"location":"hardware/tools/#grinder","title":"Grinder","text":"<p>Also called a \u201cbench grinder\u201d</p> <p>Used to remove sharp edges from metal.</p>"},{"location":"hardware/cad/fusion360/","title":"Fusion 360","text":""},{"location":"hardware/cad/fusion360/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Download Fusion 360 from Autodesk.</p> <ul> <li>Fusion 360 Download</li> <li>Press \u201cGet Fusion 360 For Free\u201d</li> <li>Press \u201cGet Started\u201d</li> <li>Fill out the form</li> <li>Sign up with a personal email.</li> <li>You might need to give them proof of a school ID.</li> <li>If you don\u2019t have a school ID to take a photo of, take a screenshot of SchoolMax. Make sure the name of the school, your name, and the school year are visible in the image.</li> </ul> </li> <li> <p>Ask someone to add you to the Fusion team.</p> </li> <li> <p>Once you\u2019re in the team, you\u2019ll see in the upper-left hand corner the Area 53 team.</p> <ul> <li>Click on this to enter the team.</li> </ul> </li> <li> <p>You\u2019ll see some number of folders, this\u2019ll probably increase.</p> <ul> <li>Any folder of a team name is off limits, you can open the documents but you can\u2019t edit them.</li> <li>The VRC parts folder is for everyone\u2019s use and for everyone\u2019s builds. DO NOT edit these parts in the VRC parts folder. If you edit these parts, they will change in every build. If you need to edit them, make a copy of it first then edit it.</li> <li>There might be a new members folder. Please create a new folder under this to store your builds.</li> </ul> </li> <li> <p>Look at your toolbar on the top of your screen. If you see something called \u201cVEX CAD LIBRARY\u201d you\u2019re fine, if not download the add-in from below. You don\u2019t have to download anything else.</p> <ul> <li>https://www.vexforum.com/t/vex-cad-fusion-360-parts-library-release-log/83263</li> </ul> </li> </ol>"},{"location":"hardware/cad/fusion360/#further-reading","title":"Further Reading","text":"<ul> <li>VEX Fusion 360 Tutorial<ul> <li>Disregard the split body tool for cutting parts, there is a better method (step 5).</li> </ul> </li> </ul>"},{"location":"hardware/cad/introduction/","title":"CAD","text":"<p>Computer Aided Design (CAD) is a very powerful tool in planning out your robot.</p>"},{"location":"hardware/cad/introduction/#general-resources","title":"General Resources","text":"<ul> <li>Vex CAD Discord</li> </ul>"},{"location":"hardware/cad/inventor/","title":"Inventor","text":""},{"location":"hardware/cad/inventor/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Download Inventor from Autodesk.</p> <ul> <li>Inventor Download</li> <li>Press \u201cGet Inventor For Free\u201d</li> <li>Press \u201cGet Started\u201d</li> <li>Fill out the form</li> <li>Sign up with a personal email.</li> <li>You might need to give them proof of a school ID.</li> <li>If you don\u2019t have a school ID to take a photo of, take a screenshot of SchoolMax. Make sure the name of the school, your name, and the school year are visible in the image.</li> </ul> </li> <li> <p>Install the Inventor Library</p> <ul> <li>Inventor Library Download</li> </ul> </li> </ol>"},{"location":"hardware/cad/inventor/#further-reading","title":"Further Reading","text":"<ul> <li>BLRS Wiki: Inventor Chassis</li> </ul>"},{"location":"hardware/cad/onshape/","title":"Onshape","text":""},{"location":"hardware/cad/onshape/#getting-started","title":"Getting Started","text":"<p>Use the following instructions to set up an Onshape account, and use the VEX Parts Library.</p> <ol> <li> <p>Go to https://www.onshape.com/en/education/sign-up and select \"Create an Account\" on the website.</p> </li> <li> <p>Enter School information and other details, confirm your email, and create the account.</p> </li> <li> <p>Once your account is created and you are in the Onshape home page, click \"Public\" in the left menu.</p> </li> <li> <p>Click the search bar at the top, and in the \"Description\" box, type \"Official VEX V5 Library,\" and search.</p> </li> <li> <p>A variety of different sub-part libraries should appear. Select all of them, and right click. A small menu should appear.</p> </li> <li> <p>Select \"Labels\" and then click \"Create new label.\" Name it whatever you would like and create it. You should now have access to these libraries in any document. To use them, when in an assembly select \"insert\" from the top bar and then select \"Other documents.\" You should see your tag in the menu, which you can then click on to view all the vex parts, and insert them in your project.</p> </li> </ol>"},{"location":"hardware/cad/onshape/#further-reading","title":"Further Reading","text":"<ul> <li>V5 Parts Library Instructions</li> <li>Design Your VEX Robot in the Cloud With Onshape</li> </ul>"},{"location":"hardware/cad/solidworks/","title":"Solidworks","text":""},{"location":"hardware/cad/solidworks/#getting-started","title":"Getting Started","text":"<p>Before installing the new version of SOLIDWORKS, please uninstall all previous SOLIDWORKS versions and review the System Requirements.</p> <p>Please follow the instructions below to download the product:</p> <ol> <li> <p>Go to: www.solidworks.com/SEK and complete the form (first name, last name email address, select \u201cstudent team\u201d on dropdown)</p> </li> <li> <p>Under product information:</p> <ul> <li>Ask someone in the club for a serial number</li> <li>Select Yes ( I already have a serial number)</li> <li>Choose 2022-2023 version</li> <li>Input your serial number</li> </ul> </li> </ol> <p>If you do not activate the license after installing, you will only receive a 30-day license. Please give this serial number out to team members only. This serial number will expire July 31, 2024.</p> <p>Installation and activation instructions are here: www.solidworks.com/installation_instructions</p> <p>If for any reason you have a problem with the software installation, please go here www.solidworks.com/studentsupport.</p>"},{"location":"hardware/cad/solidworks/#further-reading","title":"Further Reading","text":"<ul> <li>Solidworks Course</li> <li>Solidworks Part Library</li> </ul>"},{"location":"introduction/foreword/","title":"Foreword","text":""},{"location":"introduction/foreword/#welcome","title":"Welcome","text":"<p>As a freshman, you\u2019ll need to learn new skills, and be able to execute them. As I\u2019ve said, my freshman year was not nearly as good as my sophomore year, but I learned many skills and lessons to prepare me. I\u2019m trying to include 3 things in this manual: General robotics knowledge, Stuff no one teaches you but expects you to do (like taxes), and Theory. You have to understand general robotics knowledge to be able to do anything. This includes everything in The Basics and everything except Leading in The Techniques. I would also include Resources here, but it contains links for all types of skills. Still check out Resources and know how to use the links. Next is the tax-like stuff. You should understand this to become a better teammate, and to understand how to handle situations. If you know how to properly handle situations, you\u2019re a very valuable person. These include Leading, and everything in The Season and The Tournament. Last, we have theory. This may be the worst part of this document because we get away from the robotics standpoint and approach the \u201cpolitical\u201d side of it. I\u2019ll elaborate more in the actual section, but Theory teaches you how to lead and change the entire club. Take everything I say as a guideline; always put your own spin on these to better conform to your environment. Other than that, I can only give you my best.</p>"},{"location":"introduction/foreword/#being-a-good-teammate","title":"Being a Good Teammate","text":"<p>A good teammate has valuable robotics skills, but is also generally a good person. We\u2019ll start on robotics skills, which I\u2019ll elaborate more on in The Techniques. Each person has their own job. Each person should be the best person, or close to the best, for that job. If you know how to navigate your job well, and solve problems within your job, you have valuable robotics skills. But, let\u2019s say that you have the best person for each role. All of them hate each other. This team won\u2019t work as each person can\u2019t be a good person to each other. If you have a team with people that can work well together, no matter the robotics skill, they will be a good team and if not they\u2019ll at least have fun. To close, be a nice person to your teammates. You should have different opinions and ideas, but you should also resolve the differences healthily. Robotics will get heated, but if your team can solve the problem using logic, you\u2019ll turn out on top.</p>"},{"location":"introduction/recommended-reading-order/","title":"Recommended Reading Order","text":"<p>Different people need to read different parts of this manual at different times. When you transfer into a new position, we suggest reading the corresponding section.</p>"},{"location":"introduction/recommended-reading-order/#freshman-year","title":"Freshman Year","text":"<ul> <li>The Basics</li> <li>Builders: Hardware</li> <li>Coders: Software</li> <li>Drivers: Driving Techniques</li> <li>Notebookers: Notebooking Techniques</li> <li>The Season</li> <li>The Tournament</li> </ul> <p>In your freshman year, you aren\u2019t expected to be the lead builder, lead coder, lead driver, or lead notebooker, but if you\u2019re looking into it, you should start learning. Your freshman year is also about making mistakes in order to improve. You aren\u2019t expected to lead your team through a season or a tournament, but you are expected to learn, so that you will have the experience and confidence to lead when you are older. Don\u2019t be afraid to make mistakes and ask questions, it\u2019s more important that you build your knowledge through practice.</p>"},{"location":"introduction/recommended-reading-order/#junior-year","title":"Junior Year","text":"<ul> <li>Leaders: Leading Techniques</li> <li>Club Leaders: Theory</li> </ul> <p>In your junior year, one member of your team should probably be taking the leading role. They\u2019re big shoes to fill - leaders need to have a grasp of all aspects of robotics and need to be able to guide and empower their team. Read Leading Techniques. Many times, devoted members want to restructure the club because they don\u2019t like X, Y, and Z. These people don\u2019t have to be the leaders of teams, but a large group of devoted members will be able to make positive changes. Read Theory.</p>"},{"location":"software/basics/","title":"Basics","text":"<p>All of our robots are programming in C++, so a basic familiarity with it is required. The following concepts are required to be able to program a robot:</p> <ul> <li>Variables</li> <li>Datatypes</li> <li>Operators</li> <li>Scope</li> <li>Control Flow</li> <li>Functions</li> <li>Header files</li> <li>Classes and Objects</li> </ul> <p>If you are unfamiliar with C++, we recommend that you look at this tutorial. The tutorial itself is quite long, and not all of it will be needed for the basics of robotics, so we recommend that you read these excepts first:</p> <ul> <li>Introduction to objects and variables</li> <li>Variable assignment and initialization</li> <li>Introduction to fundamental data types</li> <li>Introduction to literals and operators</li> <li>Comments</li> <li>Introduction to functions</li> <li>Introduction to local scope</li> <li>Introduction to if statements</li> <li>Introduction to loops and while statements</li> <li>Introduction to the preprocessor</li> <li>Header files</li> <li>Header Guards</li> <li>Welcome to object oriented programming</li> <li>Classes and class members</li> </ul> <p>Of course, we highly recommend that you try to read the whole tutorial, but this should be enough to get you started.</p>"},{"location":"software/conventions/","title":"Conventions","text":"<p>When we say conventions, we don't mean places where people meet up, but rules for how to write your program correctly.</p> <p>Good rules offer many advantages:</p> <ul> <li>Better code quality</li> <li>Faster development</li> <li>Better teamwork</li> </ul>"},{"location":"software/conventions/#area-53-conventions","title":"Area 53 Conventions","text":""},{"location":"software/conventions/#coding-style","title":"Coding Style","text":""},{"location":"software/conventions/#program-architecture","title":"Program Architecture","text":""},{"location":"software/conventions/#comments","title":"Comments","text":""},{"location":"software/git/","title":"Git","text":""},{"location":"software/git/#what-is-git","title":"What is Git","text":"<p>Git is a version control system created by Linus Torvalds. It provides a large amount of benefits including:</p> <ul> <li>a record of the history of your project</li> <li>working with other developers</li> <li>automated testing</li> </ul> <p>Our organization uses Git along with GitHub to manage our code. We have a GitHub organization where we store all of our code. You can find this organization along with our repositories here</p>"},{"location":"software/git/#getting-started","title":"Getting Started","text":"<p>To get started with using Git and GitHub you'll need to things:</p> <ol> <li>a GitHub account, which can be obtained from here.</li> <li>the git command line interface.</li> </ol> <p>Some systems might already come with git installed, but if that is not the case it can be installed like so:</p>"},{"location":"software/git/#windows","title":"Windows","text":"<p>On windows systems you'll need to download it directly from here.</p>"},{"location":"software/git/#macos","title":"MacOS","text":"<p>On MacOS git can be installed either through XCode or through the brew package manager.</p> <pre><code># XCode Package\nxcode-select --install\n\n# Brew\nbrew install git\n</code></pre>"},{"location":"software/git/#linux","title":"Linux","text":"<p>On Linux you can follows these instructions.</p>"},{"location":"software/git/#configuring-git","title":"Configuring Git","text":"<p>Once you're set up you'll have to properly configure your local git installation.</p> <p>Make sure that the email is the same as the one that you used for your GitHub account.</p> <pre><code>git config --global user.name \"First Last\"\ngit config --global user.email \"user#domain.com\"\n</code></pre> <p>You'll also have to set up authentication with GitHub. The preferred way to do this is with SSH keys.</p> <p>Alternatively, if you're using Vs Code you can authenticate through that.</p>"},{"location":"software/git/#joining-the-organization","title":"Joining the Organization","text":"<p>Once you've configured git, and created a GitHub account, you can join our organization. DM one of our admins with your GitHub username and they'll invite you to the organization. By default you'll only be able to view your team's code for this season, as well as all of the code from past seasons. You will only be able to edit your team's code.</p>"},{"location":"software/git/#developing-on-a-repository","title":"Developing on a Repository","text":"<p>In order to edit the code on your computer, you'll need to clone it.</p> <pre><code># This will work on any repository\ngit clone https://github.com/Area-53-Robotics/53E.git\n\n# This will only work if you have SSH configured\ngit clone git@github.com:Area-53-Robotics/53E.git\n</code></pre> <p>In order to update that code with the latest changes in the remote repository you can do:</p> <pre><code>git pull --rebase\n</code></pre> <p>Specifying rebase makes it so that your changes are placed ahead in history from the new changes, making the history more linear and readable.</p> <p>If you don't want to specify rebase every time you pull, you can change it in the config.</p> <pre><code>git config --global pull.rebase true\n</code></pre> <p>Once you are satisfied with your changes you can push them up to the remote repository like so.</p> <pre><code>git diff # Review your changes\ngit add . # Stage your changes\ngit commit -m \"describe your changes here\" # Add your changes to history\ngit push # push your changes with the remote repository\n</code></pre> <p>Note</p> <p>Commits should be small and frequent. A good rule of thumb is keeping your changes to where they can be summarized by a single sentence. For example: \"Fixed a typo\" or \"Added the ability to subtract\". This makes history more clear and readable.</p>"},{"location":"software/git/#further-reading","title":"Further Reading","text":"<ul> <li>Git for Absolute Beginners</li> </ul>"},{"location":"software/introduction/","title":"Software","text":"<p>Coding is a crucial part of robotics. Building may create robots, but coding is what actually brings life to them. Even if you plan on being a builder, it\u2019s important to know at least some basic coding to be able to familiarize yourself with your team\u2019s code as well as solve simple problems in the absence of a coder. In this section we\u2019ll teach you the general coding knowledge you\u2019ll need to be able to create effective and working programs for robotics.</p>"},{"location":"software/introduction/#programming-mindset","title":"Programming Mindset","text":"<p>Much of programming is creating programs for your team's robot. But it's also much more than that.</p> <p>Being a programmer is about You'll need to work with builders, squad leaders, drivers, notebookers, and even other programmers in order to be successful.</p>"},{"location":"software/introduction/#what-is-programming","title":"What is programming?","text":"<p>In his first lecture for CS50 2022 (Harvard's introductory computer science course, which you can check out for free here), David J. Malan states that computer science is \"all about information and...the solving of problems.\" This problem-solving process essentially boils down to the following diagram:</p> <pre><code>graph LR;\n    A(Input)--&gt;B(Program);\n    B--&gt;C(Output);</code></pre> <p>As a programmer, your main job is to make a Program that takes in information (Input) and does something with it to produce a desirable outcome (Output). Here's how this would work with drive code.</p> <ol> <li>Input: The inputs are the joystick values sent from the controller to the robot.</li> <li>Program: Code that takes the joystick inputs and uses them to send commands to the robot.</li> <li>Output: The robot moves as the driver intended.</li> </ol> <p>You'll want to keep all three of these steps in mind when you're programming. Make sure you have all the sensors and peripherals you need for your Inputs. Then, find out how to use those inputs in your Program to perform some kind of action (Output).</p>"},{"location":"software/introduction/#programming-tips","title":"Programming Tips","text":"<ul> <li>Communicate with your driver: Consult your team's driver on how they want to operate the robot using the controller. Design usercontrol code with their preferences in mind.<ul> <li>Furthermore, try to make their life as easy as possible during matches to give them an edge over other teams. Are there any difficult tasks that you can automate for them for more reliable scoring?</li> </ul> </li> <li>Communicate with your builders and team leader: Work with your team to ensure that your bot has all the sensors you need for your program, and if you need sensors organized in a specific manner, let them know ahead of time so they can account for that in their design.<ul> <li>Don't be afraid to do some mechanical work, either! If you're asked to help with building the robot, lend an extra pair of hands. This can not only speed up the build process, but also give you a better feel for the robot you are programming for and its potential capabilities and limitations included.</li> </ul> </li> </ul>"},{"location":"software/introduction/#further-reading","title":"Further Reading","text":"<p>This is the baseline that you will need to program for robotics, but we highly recommend that you read through some other tutorials. We recommend this one.</p>"},{"location":"software/advanced-concepts/bang-bang/","title":"Bang Bang Controller","text":"<p>The bang bang controller is one of the most basic control loops you can use. It's a feedback controller which means that it responds to the current state of the system. With this controller, there are only two outputs, on, and off.</p> <pre><code>float error = calculateError(); // Error is the distance away from the point you want to reach.\n\nwhile (true) {\nerror = calculateError();\nif (error &gt; 0)\nchassis.move(127); // Move the chassis forward at max speed\n} else {\nchassis.move(0); // Stop the chassis\n}\n}\n</code></pre> <p>In this case, the while loop would run until the system hits the target, in this case the drivetrain. Generally you would not use a bang bang controller for autonomous drivetrain movement because you usually overshoot your target, however for some systems you don't need any more precision then bang bang.</p>"},{"location":"software/advanced-concepts/boomerang/","title":"Boomerang Controller","text":"<p>Prerequisite knowledge:</p> <ul> <li>trigonometry</li> </ul> <p>The boomerang controller isn't really a controller, although the VEX community calls it that. The boomerang controller is a method of moving the bot to a point on the field. It also lets you specify the absolute rotation the bot will end up in. This is 2D motion, so it requires odometry to function. The boomerang controller actually uses a PID controller underneath to get to it's target.</p>"},{"location":"software/advanced-concepts/boomerang/#theory","title":"Theory","text":"<p>The algorithm doesn't actually have the robot move to the target point, it has it move it an intermediate carrot point. As the robot gets closer to the carrot point, the carrot point moves closer to the target point. This causes the robot to move towards the target.</p> <p> </p> In this example, the bot is moving to (0,0) and will end with a rotation of 0 degrees."},{"location":"software/advanced-concepts/boomerang/#math","title":"Math","text":"<p>The math to calculate the carrot point is pretty simple.</p> <p>First we calculate the distance between the start point and the end point.</p> <p>The following variables are used:</p> <ul> <li>\\(h\\) is the distance between the start point and end point.</li> <li>\\(x_{start}\\) is the x coordinate of the current position of the robot.</li> <li>\\(y_{start}\\) is the y coordinate of the current position of the robot.</li> <li>\\(x_{end}\\) is the x coordinate of the target position.</li> <li>\\(y_{end}\\) is the y coordinate of the target position.</li> <li>\\(x_{carrot}\\) is the x coordinate of the carrot point.</li> <li>\\(y_{carrot}\\) is the y coordinate of the carrot point.</li> <li>\\(d_{lead}\\) is the gain that controls how far the carrot point is away from the end point. Can be a value between 0 and 1.</li> </ul> \\[ h=\\sqrt{x_{start}-x_{end}+y_{start}-y_{end}} \\] <p>Then we calculate x the coordinate of the carrot point by subtracting the y component of \\(h\\) from \\(x_{end}\\)</p> \\[ x_{carrot}=x_{end}-h\\sin(\\theta_{end})*d_{lead} \\] <p>And we calculate y the coordinate of the carrot point by subtracting the x component of \\(h\\) from \\(x_{end}\\)</p> \\[ y_{carrot}=y_{end}-h\\cos(\\theta_{end})*d_{lead} \\]"},{"location":"software/advanced-concepts/boomerang/#implementation","title":"Implementation","text":"<p>This algorithm doesn't provide any actual movement control, so we'll use PID. You'll need to PID controllers, one for the linear movement, and one for the rotational movement. There is more information on how to move to 2D points here.</p> <p>The carrot point changes over time, so a control loop is required. Every time the loop runs you'll need to:</p> <ol> <li>Get the current position of the robot.</li> <li>Calculate the new carrot point.</li> <li>Calculate the linear error from the robot to the carrot point.</li> <li>Get the output of the linear PID controller.</li> <li>Calculate the rotational error from the robot to the carrot point.</li> <li>Get the output of the rotational PID controller.</li> <li>Move the motors with the outputs of the controllers.</li> </ol> <p>Here is some pseudocode for that loop:</p> <pre><code>class Point {\npublic:\nfloat x;\nfloat y;\nfloat theta;\n\nPoint(float x, float y, float theta) {\nx = x;\ny = y;\ntheta = theta;\n}\n\nfloat getLinearDist(Point other) {\nreturn std::hypot(this-&gt;x - other.x, this-&gt;y - other.y);\n}\n\n};\n\nbool atTarget;\nfloat lead = 0.5;\n\nwhile (!atTarget) {\nPoint target(10, 10, 90);\nPoint currentPosition = getCurrentPosition(); // Get current position from odometry\n\nPoint carrotPoint = Point(\n(target.x - distance * sin(target.theta) * lead),\n(target.y - distance * cos(target.theta) * lead),\n0.0);\n\n// Movement code ...\n\n}\n</code></pre>"},{"location":"software/advanced-concepts/control-loops/","title":"Control Loops","text":"<p>Control loops are the fundamental part of overall control theory. A control loop brings a system to a target. This can be any system, a thermostat, a car, or even a robot. The target can be anything, the temperature of the system, the position of the system, or even the velocity of the system. As long as there is a way to affect the system, and a desired target, you can apply a control loop. There are two major variants of control loops: open loop control and closed loop control.</p>"},{"location":"software/advanced-concepts/control-loops/#open-loop-control","title":"Open Loop Control","text":"<p>In this variant, also known as feedforward control, the loop does not react to the state of the system. A good example of this is the driver controlling the robot. In this case, the robot is the system, and the robot's position is the state of the loop. The driver knows where they want the robot to go (the target), and moves the robot accordingly. In this scenario, the robot is not adjusted based on it's current position, it's adjusted based on the input from the driver. The code is never aware of the robot's position. Here is a visualization of open loop control:</p> <p></p> <p>As you can see here, The loop doesn't check the state of the system, it just outputs directly.</p>"},{"location":"software/advanced-concepts/control-loops/#closed-loop-control","title":"Closed Loop Control","text":"<p>In this variant, also known as feedback control, responds to the state of the system. A good example of this is a thermostat. The thermostat brings the room to a target temperature. It gets the current temperature, and if the current temperature is too low, it will start heating, but if the temperature it too high, it will stop. Here is a visualization of closed loop control:</p> <p></p>"},{"location":"software/advanced-concepts/introduction/","title":"Advanced Concepts","text":"<p>The concepts in this section aren't required to make a functioning robot, but they can make your robot extremely efficient and precise, a must if you want to make large scale autonomous routines.</p>"},{"location":"software/advanced-concepts/introduction/#control-theory","title":"Control Theory","text":"<p>From Wikipedia:</p> <p>Control theory is a field of control engineering and applied mathematics that deals with the control of dynamical systems in engineered processes and machines. The objective is to develop a model or algorithm governing the application of system inputs to drive the system to a desired state, while minimizing any delay, overshoot, or steady-state error and ensuring a level of control stability; often with the aim to achieve a degree of optimality.</p> <p>If you are moving your robot, control theory is something to take into consideration. This can be applied anywhere where you have control over a system, and a way to measure it's position. This section covers multiple controllers that can be used to move a system in just the right way, from primitive bang bang controllers, to PID, TBH, and FeedForward controllers.</p>"},{"location":"software/advanced-concepts/introduction/#position-tracking","title":"Position Tracking","text":"<p>You cannot apply control theory if you don't have reliable data on the location of your robot. There are numerous methods to tracking your robot, from 1 dimensional distance, to full field position tracking with odometry.</p>"},{"location":"software/advanced-concepts/move-to-point/","title":"Moving to 2D Points","text":""},{"location":"software/advanced-concepts/move-to-point/#theory","title":"Theory","text":"<p>Odometry lets you visualize the robot in 2D space, however this isn't very useful without a way to traverse that 2D Space. There are many ways to solve this problem, but the simplest way is to use PID. We can use two PID controllers to move the robot. One controller will move the bot towards the point, and the other one will rotate the bot to face the point.</p>"},{"location":"software/advanced-concepts/move-to-point/#math","title":"Math","text":"<p>In order to use PID, we first need error. We have two PID loops, so we'll need to different error values, one for the linear error, and one for the rotational error.</p>"},{"location":"software/advanced-concepts/move-to-point/#rotational-error","title":"Rotational Error","text":"<p>This is the amount of degrees between the facing of the robot, and the target point.</p> <p></p> <p>Assuming these variables:</p> <ul> <li>\\(\\Delta x\\) is the change in x coordinate from the current point to target point.</li> <li>\\(\\Delta y\\) is the change in y coordinate from the current point to the target point.</li> <li>\\(e_{rotational}\\) is the rotational error, in radians.</li> <li>\\(\\theta_{current}\\) is the current rotation of the robot relative to the field, in radians.</li> </ul> \\[ e_{rotational}=\\theta_{current}-atan2(\\Delta y,\\Delta x) \\]"},{"location":"software/advanced-concepts/move-to-point/#linear-error","title":"Linear Error","text":"<p>While this seems like it should just be as simple as using the distance formula, it isn't. PID loops are only concerned with the error they can correct for. We want to find the distance that the robot has to travel in order to get us as close as possible to the target point without turning. If we get the actual distance, the error might actually increase as the robot moves, causing a negative feedback loop.</p> <p></p> <p>Assuming these variables:</p> <ul> <li>\\(\\Delta x\\) is the change in x coordinate from the current point to target point.</li> <li>\\(\\Delta y\\) is the change in y coordinate from the current point to the target point.</li> <li>\\(e_{linear}\\) is the linear error.</li> <li>\\(e_{rotational}\\) is the rotational error, in radians.</li> </ul> \\[ e_{linear}=\\sin(e_{rotational})*\\sqrt{\\Delta x + \\Delta y} \\]"},{"location":"software/advanced-concepts/move-to-point/#implementation","title":"Implementation","text":"<p>This will only cover calculating error, since PID was already covered here.</p> <pre><code>class Point {\npublic:\nfloat x;\nfloat y;\nfloat theta;\n\nPoint(float x, float y, float theta = 0) {\nx = x;\ny = y;\ntheta = theta;\n}\n};\n\nPoint targetPoint(10, 10);\n\nwhile (true) {\nPoint currentPosition = getCurrentPosition(); // Get position from odometry\n\n// update error\nfloat deltaX = targetPoint.x - currentPosition.x;\nfloat deltaY = targetPoint.y - currentPosition.y;\nfloat targetTheta = fmod(radToDeg(M_PI_2 - atan2(deltaY, deltaX)), 360);\nfloat hypot = std::hypot(deltaX, deltaY);\nfloat diffTheta1 = angleError(currentPosition.theta, targetTheta);\nfloat diffTheta2 = angleError(currentPosition.theta, targetTheta + 180);\nfloat angularError =\n(std::fabs(diffTheta1) &lt; std::fabs(diffTheta2)) ? diffTheta1 : diffTheta2;\nfloat lateralError = hypot * cos(degToRad(std::fabs(diffTheta1)));\n\n// Do PID computations ...\n\n// Move the motors\nleftPower = linearPidOutput - rotationalPidOutput;\nrightPower = linearPidOutput + rotationalPidOutput;\n\nleftMotors.move(leftPower);\nrightMotors.move(rightPower);\n}\n</code></pre> <p>Note</p> <p>Rotational error can very quickly change if the robot crosses the target point. This can cause the robot to spin in circles. You will need to implement something to handle what happens when the robot is near the target.</p>"},{"location":"software/advanced-concepts/odometry/","title":"Odometry","text":"<p>Prerequisite Mathematical Knowledge:</p> <ul> <li>algebra</li> <li>trigonometry</li> </ul> <p>Odometry lets you track the position of the robot in 2D space, using Cartesian coordinates. This method of tracking was popularised by team 5225, the Pilons. If you want to read more about how to derive the math behind odometry, you should read their guide.</p>"},{"location":"software/advanced-concepts/odometry/#theory","title":"Theory","text":"<p>Odometry is a very useful tool. It provides the absolute position of your robot's tracking center in 2D space. The location of the tracking center is dictated by the placement of your tracking wheels (see below). This means that you can account for error that is created during movement. If one of the movements of your bot is off, the next movement will correct for that, as long as you tell your bot to move to absolute positions on the field.</p> <p>That being said there are some limitations. Odometry can often drift, which can lead to small error that builds up over time. Teams often solve this problem by aligning their robot against a wall, and then resetting the robot's position in the odometry.</p>"},{"location":"software/advanced-concepts/odometry/#hardware-prerequisites","title":"Hardware Prerequisites","text":"<p>Your robot needs some way to track its position. This can be achieved in multiple ways. The main things you need are:</p> <ul> <li>a way to track the robot's movement forwards and backwards</li> <li>a way to track the robot's movement side to side</li> <li>a way to track the robot's rotation</li> </ul> <p>Typically this is done with passive tracking wheels. These are wheels that are directly attached to an encoder that tracks their position. Below is a typical tracking wheel:</p> <p> </p> Credit to LemLib for this image <p>Usually you need three of them, two parallel to each other, and one perpendicular. The two parallel provide forwards and backwards tracking, as well as rotation, while the perpendicular one provides side to side movement. You can also use an IMU Sensor in the place of one of the parallel tracking wheels.</p> <p>While you could just use the integrated motor encoders, it is usually not advised, because of wheels slipping, and gear slop. Sensors get less accurate the farther away they are from what they're tracking, that's just a fact of life.</p> <p>The position of your tracking wheels dictates your tracking center.</p> <p> </p> Credit to LemLib for this image"},{"location":"software/advanced-concepts/odometry/#math","title":"Math","text":"<p>First we need to define some variables:</p> <ul> <li>\\(s_L\\) is the distance from the left tracking wheel to the tracking center.</li> <li>\\(s_R\\) is the distance from the right tracking wheel to the tracking center.</li> <li>\\(s_S\\) is the distance from the center tracking wheel to the tracking center.</li> </ul> <p>Odometry is the compound change in position of the robot over time. Essentially, the final position can be calculated as the sum of all of the movements up to that point. The move often the change in position is calculated, the more accurate the position is.</p> <p></p> <p>The first thing that needs to be calculated is the rotation of the robot. This can be calculated like this:</p> \\[ \\Delta\\theta=\\frac{\\Delta L-\\Delta R}{s_L+s_R} \\] <p>The function is only concerned with the difference between \\(\\Delta R\\) and \\(\\Delta L\\), so we can use the total distance the wheels have traveled to find the current absolute orientation.</p> <p>Now we need a way to calculate the distance the robot has actually traveled. The first thing we need is a local coordinate system. This is a temporary coordinate plane that assumes that we use as an in between step every time we need to calculate the distance the robot has moved. This local coordinate system assumes that the robot's starting position is \\((0,0)\\).</p> <p>The local y coordinate is the distance tracked by the left or right tracking wheel.</p> <p></p> <p>The local x coordinate is the distance tracked by the center tracking wheel</p> <p></p> <p>If the change in rotation is zero, the distance traveled is simply equal to the distance the tracking wheels have traveled.</p> \\[ \\Delta Y_{local}=\\Delta L \\] \\[ \\Delta X_{local}=\\Delta S \\] <p>However, if the robot turned while making it's movement, the calculation becomes more complicated.</p> <p></p> <p>As you can see in the image above, the actual distance traveled by the robot is not equal to the arc length that the wheels create. We can calculate the actual distance by using this formula:</p> \\[ \\Delta X_{local}=2\\sin{\\frac{\\theta}{2}}*\\left(\\frac{\\Delta S}{\\Delta \\theta}+s_S\\right) \\] \\[ \\Delta Y_{local}=2\\sin{\\frac{\\theta}{2}}*\\left(\\frac{\\Delta L}{\\Delta \\theta}+s_L\\right) \\] <p>We then need to calculate the average rotation of the robot.</p> \\[ \\theta_m=\\theta_0\\frac{\\Delta\\theta}{2} \\] <p>Now we need to convert these local coordinates to the change in global coordinates (the actual position of the robot). We can use the average rotation to get the x and y components of the local x coordinate and the local y coordinate.</p> \\[ \\Delta X_{global}=\\Delta X_{local}*sin(\\theta_m)-\\Delta Y_{local}*cos(\\theta_m) \\] \\[ \\Delta Y_{global}=\\Delta X_{local}*cos(\\theta_m)-\\Delta Y_{local}*sin(\\theta_m) \\]"},{"location":"software/advanced-concepts/odometry/#implementation","title":"Implementation","text":"<p>Odometry usually runs in an infinite loop, for the duration of the program. Usually you would put it in its own task, so that it can run concurrently to the main program.</p> <p>Every time this loop runs, you need to do these things:</p> <ol> <li>Store the values of the encoders in variables. <pre><code>leftPosition = getLeftEncoderValue(); // Returns the distance the encoder has traveled, in degrees.\nrightPosition = getRightEncoderValue();\nperpendicularPosition = getPerpendicularEncoderValue();\n</code></pre></li> <li>Calculate the change in encoder values since the last loop, and then convert that value into distance traveled. The units of this variable will be whatever the units of WHEEL_RADIUS are, usually inches. <pre><code>deltaLeft = (leftPosition - prevLeftPosition) * (M_PI / 180) * WHEEL_RADIUS; // Convert degrees to radians\ndeltaRight = (rightPosition - prevRightPosition) * (M_PI / 180) * WHEEL_RADIUS; // You can omit this if you have an IMU\ndeltaPerpendicular = (perpendicularPosition - prevPerpendicularPosition) * (M_PI / 180) * WHEEL_RADIUS;\n</code></pre></li> <li>Update the previous values of the encoders. <pre><code>prevLeftPosition = leftPosition;\nprevRightPosition = rightPosition;\nprevPerpendicularPosition = perpendicularPosition;\n</code></pre></li> <li>Calculate total distance traveled for each encoder. If you have an IMU you can skip this step. <pre><code>totalDeltaLeft += deltaLeft;\ntotalDeltaRight += deltaRight;\ntotalDeltaPerpendicular += deltaPerpendicular;\n</code></pre></li> <li>Calculate the current absolute orientation of the robot. This is the offset of the robot from the field. If you're using parallel tracking wheels: <pre><code>// TRACKING_WIDTH is the distance between the two tracking wheels in inches\ncurrentAbsoluteOrientation = (totalDeltaLeft - totalDeltaRight) / (TRACKING_WIDTH);\n</code></pre> If you have an IMU: <pre><code>currentAbsoluteOrientation = getImuHeading() * M_PI / 180; // Convert degrees to radians\n</code></pre></li> <li>Calculate deltaTheta (change in rotation). <pre><code>deltaTheta = currentAbsoluteOrientation = prevTheta;\nprevTheta = currentAbsoluteOrientation;\n</code></pre></li> <li>Now we get to the hard part. We now have to calculate local offset. This is the distance the robot has traveled relative to its rotation. If deltaTheta is zero, the robot moved in a perfectly straight line. This distinction is mainly to prevent division by zero. <pre><code>deltaXLocal = deltaPerpendicular;\ndeltaYLocal = deltaLeft;\n</code></pre> If deltaTheta is any other value, we calculate local coordinates like this: <pre><code>// LEFT_TRACKING_RADIUS is the distance from the left tracking wheel to the tracking center of the robot\n// PERPENDICULAR_TRACKING_RADIUS is the distance from the perpendicular tracking wheel to the tracking center of the robot\n\ndeltaXLocal = 2 * sin(deltaTheta) * ((deltaPerpendicular / deltaTheta) + PERPENDICULAR_TRACKING_RADIUS);\n\ndeltaYLocal = 2 * sin(deltaTheta) * ((deltaLeft / deltaTheta) + LEFT_TRACKING_RADIUS);\n</code></pre></li> <li>Calculate the average angle for this loop. <pre><code>avgTheta = currentAbsoluteOrientation - (deltaTheta / 2);\n</code></pre></li> <li>Calculate the change in global coordinates. This is done by taking the x and y components of the local coordinates. <pre><code>deltaXGlobal = (deltaYLocal * cos(avgTheta)) -\n(deltaXLocal * sin(avgTheta));\n\ndeltaYGlobal = (deltaYLocal * sin(avgTheta)) -\n(deltaXLocal * cos(avgTheta));\n</code></pre></li> <li>Check to see if your angles are under zero, or over 2\\(\\pi\\) (360 degrees), and wrap them if they are. <pre><code>while (currentAbsoluteOrientation &gt;= 0) {\ncurrentAbsoluteOrientation -= 2 * M_PI;\n}\n\nwhile (currentAbsoluteOrientation &lt; 0) {\ncurrentAbsoluteOrientation += 2 * M_PI;\n}\n</code></pre></li> <li>Update the global coordinates. The global coordinates are the actual Cartesian coordinates of your robot. <pre><code>currentXPosition += delta_x_global;\ncurrentYPosition += delta_y_global;\ncurrentTheta = current_absolute_orientation;\n</code></pre></li> </ol> <p>Note</p> <p>This implementation assumes that the starting point of the robot is \\((0,0)\\). It is recommended that to offset the starting position of the robot in the code so that the coordinates for items of interest the same. For example, if there  is a game piece at \\((10,10)\\), you wouldn't want the starting position of your robot to affect the position in the code of the game piece. Choose a point on the field, and make that your origin. Usually, people use either the bottom left corner, or the direct center of the field.</p> <p>If you want to look at a full implementation you can fine one here.</p>"},{"location":"software/advanced-concepts/pid/","title":"PID Controller","text":""},{"location":"software/advanced-concepts/pid/#history","title":"History","text":"<p>From Wikipedia:</p> <p>It was not until 1922, however, that a formal control law for what we now call PID or three-term control was first developed using theoretical analysis, by Russian American engineer Nicolas Minorsky. Minorsky was researching and designing automatic ship steering for the US Navy and based his analysis on observations of a helmsman. He noted the helmsman steered the ship based not only on the current course error but also on past error, as well as the current rate of change; this was then given a mathematical treatment by Minorsky. His goal was stability, not general control, which simplified the problem significantly. While proportional control provided stability against small disturbances, it was insufficient for dealing with a steady disturbance, notably a stiff gale (due to steady-state error), which required adding the integral term. Finally, the derivative term was added to improve stability and control.</p> <p>Trials were carried out on the USS New Mexico, with the controllers controlling the angular velocity (not the angle) of the rudder. PI control yielded sustained yaw (angular error) of \u00b12\u00b0. Adding the D element yielded a yaw error of \u00b11/6\u00b0, better than most helmsmen could achieve.</p>"},{"location":"software/advanced-concepts/pid/#theory","title":"Theory","text":"<p>PID controller can be used anywhere a bang bang controller could be used. Similar to the bang bang controller, it uses closed loop control to adapt to interference. They are very precise, and are the bread and butter of autonomous movement. The fundamental difference between a bang bang controller and a PID controller is that the output varies based on the proximity to the target. The PID controller has a lower output as the system moves close to the target. This makes it much better than the bang bang controller, which assumes that the system can go from maximum speed to halted instantly.</p> <p></p> <p>PID stands for proportional, integral, derivative. These are the three components of the loop. These not all required. As long as your loop has the proportional term, it will function.You can make a loop with:</p> <ul> <li>P</li> <li>PI</li> <li>PD</li> <li>PID</li> </ul>"},{"location":"software/advanced-concepts/pid/#math","title":"Math","text":"<p>Assuming these variables:</p> <ul> <li>\\(p\\) is the proportional term</li> <li>\\(i\\) is the integral term</li> <li>\\(d\\) is the derivative term</li> <li>\\(k_p\\) is the proportional gain</li> <li>\\(k_i\\) is the integral gain</li> <li>\\(k_d\\) is the derivative gain</li> <li>\\(o\\) is the output of the loop</li> <li>\\(s_{target}\\) is the target state</li> <li>\\(s_{current}\\) is the current state</li> </ul> <p>The output of the controller is equal to all of the terms multiplied by their respective constants, added together.</p> \\[ o=p*k_p+i*k_i+d*k_d \\]"},{"location":"software/advanced-concepts/pid/#proportional","title":"Proportional","text":"<p>The proportional is the core of the PID loop. It is simply equal to error (the distance from the target). As the system gets close to the target, error decreases. If the system passes the target, error is negative, meaning the system will travel back to the target.</p> <p></p> <p>We can calculate proportional as the target state subtracted by the current state:</p> \\[ p=s_{target}-s_{current} \\]"},{"location":"software/advanced-concepts/pid/#integral","title":"Integral","text":"<p>If we imagine the error over time on a graph, the integral is the area under the line of error. We can think of integral as the total compound error over time.</p> <p></p> <p>We can calculate integral like this:</p> \\[ i=i+p \\] <p>By adding the current error to the current value of integral each time the loop runs, we can get the total compounded error.</p> <p>Note</p> <p>This is not exactly equal to the area under the graph, but this is as close of an approximation as we can achieve.</p> <p>The integral serves to correct for larger interferences that the proportional term cannot. If the system gets stuck, integral will build up, and gradually increase the output.</p>"},{"location":"software/advanced-concepts/pid/#derivative","title":"Derivative","text":"<p>The derivative is the rate of change at the current point in the graph. To get the derivative we need two points on the graph.</p> <p></p> <p>We can calculate the derivative by getting the two closest points on the graph possible, the current error, and the error during the previous iteration of the loop:</p> \\[ d=p-p_{prev} \\] <p>Note</p> <p>This is not how a derivative is normally calculated, but this is as close of an approximation as we can achieve.</p> <p>The derivative term predicts what the output needs to be based on the current state of the system. If the system is accelerating really quickly, the absolute value of derivative will become larger. The sign of the derivative term is always inverse to the direction that the system is moving to the target. This means that if the system is moving towards the target, derivative will be negative, and if the system is moving back to the target, derivative will be positive. This means that derivative serves to dampen the output of the controller. If the system is accelerating too quickly, derivative will compensate by getting larger. If the system is moving too slowly, derivative will compensate by getting smaller.</p>"},{"location":"software/advanced-concepts/pid/#implementation","title":"Implementation","text":""},{"location":"software/advanced-concepts/pid/#terms","title":"Terms","text":"<pre><code>float distTraveled = 0;\nfloat target = 12; // We want to move 12 inches forward\nfloat error = target;\nfloat output;\nfloat totalError;\nfloat derivative;\nfloat prevError;\n\nwhile (true) {\ndistTraveled = getDistanceTraveled(); // Returns the distance traveled in inches\n\nerror = target - distTraveled; // Proportional term\n\nintegral += error;\n\nderivative = error - prevError;\nprevError = error;\n\noutput = error + integral + derivative;\nchassis.move(output);\npros::delay(10); // Delay for 10 ms\n}\n</code></pre> <p>We also need to prevent integral windup. Integral is only relevant if the error is close to zero. If error is large, integral can grow very quickly and become unusable. We can add an if statement to solve this problem.</p> <pre><code>if (error &gt; hugeError) {\nintegral = 0;\n}\n</code></pre> <p>Note</p> <p>getDistanceTraveled() is not a real function. Replace it with your own code that calculates the distance the robot has traveled.</p>"},{"location":"software/advanced-concepts/pid/#gains","title":"Gains","text":"<p>However, there is still one major problem: The output of this loop does not match what the methods of the motor expect as input. We can solve this problem with gains. These are constants that are multiplied with each term. Each term has it's own constant. These are set by you, and need to be tuned manually.</p> <pre><code>float kP = 10;\nfloat kI = 0; // This would disable the integral\nfloat kD = 30;\n\nwhile (true){\n\n// ...\n\noutput = error * kP + integral * kI + derivative * kD;\n}\n</code></pre> <p>Keep in mind that these constants depend on the units of your input and ouput.</p>"},{"location":"software/advanced-concepts/pid/#tuning","title":"Tuning","text":"Credit to Wikipedia <p>Tuning is often the hardest part of PID. Follow these steps, and you'll be able to get something reasonably precise.</p> <ol> <li>Set all of your constants to zero. This will effectively disable the loop.</li> <li>Increase kP until the system overshoots and moves back and forth around the target.</li> <li>Increase kD until the system doesn't oscillate around the target anymore.</li> </ol> <p>Whether you want an I term usually depends on whether your system is trying to maintain it's position, in which case you do want I, or if your loop is exiting as soon as you hit the target, in which case you don't.</p> <ol> <li>Adjust kI until your system gets as close to the target as possible.</li> </ol>"},{"location":"software/advanced-concepts/pid/#exit-conditions","title":"Exit Conditions","text":"<p>If your system is something like a drivetrain, you probably want to exit the loop once you hit the target. However, this may be trickier than you would think. We could just do this:</p> <pre><code>while (error &gt; 0) {\n// compute the loop\n}\n</code></pre> <p>While this seems like it should work, it has some problems. This would exit instantly, as soon as error is passed. If the system is overshooting, this will have the same issues as bang bang. A more elegant solution is to require the system to be within a target range for a certain amount of time.</p> <pre><code>// Variable definitions\n\n// Time elapsed since the start of the program in milliseconds\nstartTime = getCurrentTime();\nwhile (true) {\n\n// ...\n\n// Max time is nice to have if your system gets stuck\nif (getCurrentTime() - startTime &gt; timeout) {\nbreak;\n}\n\nif (std::fabs(prevError) &lt; acceptableError) {\nif (!timeAtTarget)\ntimeAtTarget = getCurrentTime();\nelse if (getCurrentTime() - timeAtTarget &gt; settleTime)\nbreak;\n}\n}\n</code></pre> <p>Note</p> <p>getCurrentTime() is not a real function. Replace it with the equivalent function call for the API you are using.</p> <p>If you want to look at a complete implementation of PID you can find it here.</p>"},{"location":"software/advanced-concepts/pid/#further-reading","title":"Further Reading","text":"<p>George Gillard - Intro to PID</p>"},{"location":"software/examples/arcade-drive/","title":"Arcade Drive","text":"<p>This is another control scheme for controlling the drivetrain. With this, on joystick controls how fast the drivetrain move forwards and backwards, while the other controls the robot's turning.</p> <p>This control scheme may be more intuitive for beginner drivers, but is harder to program.</p> PROSVEXCode <pre><code>#include \"main.h\"\n\n// Motor definitions\npros::Motor_Group motors_left({1, 2, 3});\npros::Motor_Group motors_right({-4, -5, -6});\n\nvoid opcontrol() {\nwhile(1) {\n// Retrieve the necessary joystick values\nint leftY = master.get_analog(pros::E_E_CONTROLLER_ANALOG_LEFT_Y);\nint rightX = master.get_analog(pros::E_E_CONTROLLER_ANALOG_RIGHT_X);\n\n// Move the left side of the robot\nmotors_left.move(leftY + rightX);\n\n// Move the right side of the robot\nmotors_right.move(leftY - rightX);\ndelay(20);\n}\n}\n</code></pre> <pre><code>#include \"vex.h\"\nusing namespace vex;\n\nvex::motor left_motor(vex::PORT1);\nvex::motor right_motor(vex::PORT2);\n\nint main(void) {\nwhile(1) {\n// Retrieve the necessary joystick values\nint leftY = Controller1.Axis3.position(percent);\nint rightX = Controller1.Axis1.position(percent);\n\n// Move the left side of the robot\nmotors_left.spin(vex::directionType::fwd, leftY + rightX);\n\n// Move the right side of the robot \nmotors_right.spin(vex::directionType::fwd, leftY - rightX);\nwait(20, msec);\n}\n}\n</code></pre>"},{"location":"software/examples/introduction/","title":"Programming the Robot","text":"<p>In order to interact with the VEX brain, you will need a library. There are two major ones:</p>"},{"location":"software/examples/introduction/#vexcode","title":"VEXCode","text":"<p>This is an official library made by VEX. This is guaranteed to work for as long as VEX exists. This can be used either with it's own IDE (Integrated Development Environment, fancy word for code editor) called VEXCode Pro, or with Microsoft's VSCode.</p> <p>There is also a normal VEXCode IDE, which lets you code with blocks, similar to Scratch. However, if you use this, all programmers will instantly lose all respect for you.</p>"},{"location":"software/examples/introduction/#installation","title":"Installation","text":"<p>VEXCode Pro:</p> <ul> <li>Download</li> </ul> <p>VSCode Extension:</p> <ul> <li>VSCode Download</li> <li>Extension</li> </ul>"},{"location":"software/examples/introduction/#pros","title":"PROS","text":"<p>This is an unofficial library maintained by the students at Purdue University. It is somewhat harder to use, however it provides an experience close to what you would find in an actual C++ project. The documentation is much better written, and the library is much more powerful. It is open source, which means that development happens much faster, and that even you could contribute.</p> <p>PROS has a build in template manager, which has resulted in many libraries written for it, including:</p> <ul> <li>Sylib</li> <li>Ryanlib</li> <li>Okapilib</li> <li>ARMS</li> <li>LEGS</li> <li>EZ Template</li> </ul>"},{"location":"software/examples/introduction/#installation_1","title":"Installation","text":"<p>It is recommended to use the VSCode extension to use PROS, but there is a CLI (command line interface) if you have a different editor that you prefer.</p> <ul> <li>Installation Instructions</li> </ul>"},{"location":"software/examples/subsystem-toggling/","title":"Toggling Subsystems","text":"<p>This is a common pattern that you might want to use on subsystems. Often, subsystems will have an on or off state, and you might want to toggle between them with a single button press. This may be advantageous for the driver, because it means they don't need to hold down a button to enable something.</p> PROSVEXCode <pre><code>#include \"main.h\"\n\npros::Motor motor(1);\npros::Controller master();\npros::AdiDigitalOut piston();\n\nbool move = false; // by default, this will not move\nbool isPistonOn = false; // Piston starts retracted\n\nvoid opcontrol() {\nwhile(true) {\nif(master.get_digital_new_press(pros::Digital_B)) {\n// If this is true, move will changed to false\n// and vice versa. \nmove = !move; }\n\n// If move is true, move the motor.         \nif(move) {\nmotor.move(100);\n}\n// Else, don't\nelse {\nmotor.move(0);\n}\n\n\nif(master.get_digital_new_press(pros::Digital_A)) {\nisPistonOn = !isPistonOn; } piston.set_value(isPistonOn);\n\npros::delay(20);\n}\n}\n</code></pre> <pre><code>vex::motor mtr(vex::PORT1);\n\nvoid Motor_Move() {\nmtr.spin(vex::directionType::fwd, 100);\n}\n\nbool prev_value = false; bool move = false;\n\nint main() {\n// Since VEXCode doesn't have an equivalent function to \n// get_digital_new_press, we need to detect the new push \n// of a controller button. \nwhile (1) {\nprev_value = Controller1.ButtonB.pressing();\n// Detect a new press\nif(prev_value == false &amp;&amp; Controller1.ButtonB.pressing()) {\nmove = !move;\n}\n\nif(move) {\nmtr.spin(vex::directionType::fwd, 100);\n}\nelse {\nmtr.spin(vex::directionType::fwd, 0);\n}\nwait(20, msec);\n}\n// OR\n\n// Alternatively, VEXCode also supports \n// callbacks bound to controller buttons\n//\n// DO NOT put this in a while loop, call before a\n// while loop unlike this example. \nController1.ButtonB.pressed( Motor_Move );\n}\n</code></pre>"},{"location":"software/examples/tank-drive/","title":"Tank Drive","text":"<p>Tank drive is a control scheme for controlling the drivetrain. With this, the controller's left joystick controls the left side of the robot, while the right joystick controls the right side of the robot.</p> <p>This control scheme is very easy to code, but can be unintuitive for an inexperienced driver. Some drivers prefer this control scheme due to it's increased level of control.</p> PROSVEXCode <pre><code>#include \"main.h\"\n\n// Motor Group Declarations for Left and Right\npros::Motor_Group motors_left({1,2,3});\npros::Motor_Group motors_right({-4,-5,-6}); // Negative ports indicate reversed motors\n\nvoid opcontrol() {\nwhile(1) {\n// Drive the left side of the robot forward at joystick left Y speed\nmotors_left.move(master.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y));\n\n// Drive the right side of the robot forward at joystick right Y speed\nmotors_right.move(master.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_Y));\ndelay(20);\n}\n}\n</code></pre> <pre><code>#include \"vex.h\"\nusing namespace vex;\n\nvex::motor left_motor(vex::PORT1);\nvex::motor right_motor(vex::PORT2, true);\n\nint main(void) {\nwhile(1) {\n// Retrieve the necessary joystick values\nint leftY = Controller1.Axis3.position(percent);\nint rightY = Controller1.Axis2.position(percent);\n\n// Move the left side of the robot\nmotors_left.spin(vex::directionType::fwd, leftY);\n\n// Move the right side of the robot\nmotors_right.spin(vex::directionType::fwd, rightY);\nwait(20, msec);\n}\n}\n</code></pre>"}]}